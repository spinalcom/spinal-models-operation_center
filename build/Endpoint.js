"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;

class Endpoint extends globalType.Model {
  constructor(_group, name = "Endpoint") {
    super();
    if (FileSystem._sig_server) {
      this.add_attr({
        name: "Endpoint " + this.incrementNameId(),
        id: this.guid(),
        dataNature: new Choice(0, ["Temperature", "Humidity"]), // I dont know if we keep that
        dataType: new Choice(0, ["Null", "Boolean", "Unsigned", "Unsigned8", "Unsigned16", "Unsigned32", "Integer", "Integer16", "Real", "Double", "OctetString", "CharacterString", "BitString", "Enumerated", "Date", "Time", "Array"]), // I dont know if we keep that
        currentValue: 0,
        path: "",
        min: 0,
        max: 0,
        unit: "",
        inGroup: new Ptr(_group || 0)
      });
    }
  }

  incrementNameId() {
    globalType.operationCenter.options.endpointNameId.set(globalType.operationCenter.options.endpointNameId.get() + 1);
    return globalType.operationCenter.options.endpointNameId.get();
  }

  setGroup(_group) {
    this.inGroup.set(_group);
  }

  guid() {
    return this.constructor.name + "-" + this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4() + "-" + Date.now().toString(16);
  }

  s4() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }
}

exports.default = Endpoint;
spinalCore.register_models([Endpoint]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9FbmRwb2ludC5qcyJdLCJuYW1lcyI6WyJzcGluYWxDb3JlIiwicmVxdWlyZSIsImdsb2JhbFR5cGUiLCJ3aW5kb3ciLCJnbG9iYWwiLCJFbmRwb2ludCIsIk1vZGVsIiwiY29uc3RydWN0b3IiLCJfZ3JvdXAiLCJuYW1lIiwiRmlsZVN5c3RlbSIsIl9zaWdfc2VydmVyIiwiYWRkX2F0dHIiLCJpbmNyZW1lbnROYW1lSWQiLCJpZCIsImd1aWQiLCJkYXRhTmF0dXJlIiwiQ2hvaWNlIiwiZGF0YVR5cGUiLCJjdXJyZW50VmFsdWUiLCJwYXRoIiwibWluIiwibWF4IiwidW5pdCIsImluR3JvdXAiLCJQdHIiLCJvcGVyYXRpb25DZW50ZXIiLCJvcHRpb25zIiwiZW5kcG9pbnROYW1lSWQiLCJzZXQiLCJnZXQiLCJzZXRHcm91cCIsInM0IiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwic3Vic3RyaW5nIiwicmVnaXN0ZXJfbW9kZWxzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLGFBQWFDLFFBQVEseUJBQVIsQ0FBbkI7QUFDQSxNQUFNQyxhQUFhLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NDLE1BQWhDLEdBQXlDRCxNQUE1RDs7QUFFZSxNQUFNRSxRQUFOLFNBQXVCSCxXQUFXSSxLQUFsQyxDQUF3QztBQUNyREMsY0FBWUMsTUFBWixFQUFvQkMsT0FBTyxVQUEzQixFQUF1QztBQUNyQztBQUNBLFFBQUlDLFdBQVdDLFdBQWYsRUFBNEI7QUFDMUIsV0FBS0MsUUFBTCxDQUFjO0FBQ1pILGNBQU0sY0FBYyxLQUFLSSxlQUFMLEVBRFI7QUFFWkMsWUFBSSxLQUFLQyxJQUFMLEVBRlE7QUFHWkMsb0JBQVksSUFBSUMsTUFBSixDQUFXLENBQVgsRUFBYyxDQUFDLGFBQUQsRUFBZ0IsVUFBaEIsQ0FBZCxDQUhBLEVBRzRDO0FBQ3hEQyxrQkFBVSxJQUFJRCxNQUFKLENBQVcsQ0FBWCxFQUFjLENBQUMsTUFBRCxFQUFTLFNBQVQsRUFBb0IsVUFBcEIsRUFDdEIsV0FEc0IsRUFDVCxZQURTLEVBQ0ssWUFETCxFQUNtQixTQURuQixFQUV0QixXQUZzQixFQUVULE1BRlMsRUFFRCxRQUZDLEVBRVMsYUFGVCxFQUd0QixpQkFIc0IsRUFHSCxXQUhHLEVBR1UsWUFIVixFQUd3QixNQUh4QixFQUl0QixNQUpzQixFQUlkLE9BSmMsQ0FBZCxDQUpFLEVBU1I7QUFDSkUsc0JBQWMsQ0FWRjtBQVdaQyxjQUFNLEVBWE07QUFZWkMsYUFBSyxDQVpPO0FBYVpDLGFBQUssQ0FiTztBQWNaQyxjQUFNLEVBZE07QUFlWkMsaUJBQVMsSUFBSUMsR0FBSixDQUFRakIsVUFBVSxDQUFsQjtBQWZHLE9BQWQ7QUFpQkQ7QUFDRjs7QUFFREssb0JBQWtCO0FBQ2hCWCxlQUFXd0IsZUFBWCxDQUEyQkMsT0FBM0IsQ0FBbUNDLGNBQW5DLENBQ0dDLEdBREgsQ0FDTzNCLFdBQVd3QixlQUFYLENBQTJCQyxPQUEzQixDQUFtQ0MsY0FBbkMsQ0FBa0RFLEdBQWxELEtBQTBELENBRGpFO0FBRUEsV0FBTzVCLFdBQVd3QixlQUFYLENBQTJCQyxPQUEzQixDQUFtQ0MsY0FBbkMsQ0FBa0RFLEdBQWxELEVBQVA7QUFDRDs7QUFFREMsV0FBU3ZCLE1BQVQsRUFBaUI7QUFDZixTQUFLZ0IsT0FBTCxDQUFhSyxHQUFiLENBQWlCckIsTUFBakI7QUFDRDs7QUFHRE8sU0FBTztBQUNMLFdBQ0UsS0FBS1IsV0FBTCxDQUFpQkUsSUFBakIsR0FDQSxHQURBLEdBRUEsS0FBS3VCLEVBQUwsRUFGQSxHQUdBLEtBQUtBLEVBQUwsRUFIQSxHQUlBLEdBSkEsR0FLQSxLQUFLQSxFQUFMLEVBTEEsR0FNQSxHQU5BLEdBT0EsS0FBS0EsRUFBTCxFQVBBLEdBUUEsR0FSQSxHQVNBLEtBQUtBLEVBQUwsRUFUQSxHQVVBLEdBVkEsR0FXQSxLQUFLQSxFQUFMLEVBWEEsR0FZQSxLQUFLQSxFQUFMLEVBWkEsR0FhQSxLQUFLQSxFQUFMLEVBYkEsR0FjQSxHQWRBLEdBZUFDLEtBQUtDLEdBQUwsR0FBV0MsUUFBWCxDQUFvQixFQUFwQixDQWhCRjtBQWtCRDs7QUFFREgsT0FBSztBQUNILFdBQU9JLEtBQUtDLEtBQUwsQ0FBVyxDQUFDLElBQUlELEtBQUtFLE1BQUwsRUFBTCxJQUFzQixPQUFqQyxFQUNKSCxRQURJLENBQ0ssRUFETCxFQUVKSSxTQUZJLENBRU0sQ0FGTixDQUFQO0FBR0Q7QUE1RG9EOztrQkFBbENsQyxRO0FBK0RyQkwsV0FBV3dDLGVBQVgsQ0FBMkIsQ0FBQ25DLFFBQUQsQ0FBM0IiLCJmaWxlIjoiRW5kcG9pbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzcGluYWxDb3JlID0gcmVxdWlyZShcInNwaW5hbC1jb3JlLWNvbm5lY3RvcmpzXCIpO1xuY29uc3QgZ2xvYmFsVHlwZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB3aW5kb3c7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuZHBvaW50IGV4dGVuZHMgZ2xvYmFsVHlwZS5Nb2RlbCB7XG4gIGNvbnN0cnVjdG9yKF9ncm91cCwgbmFtZSA9IFwiRW5kcG9pbnRcIikge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKEZpbGVTeXN0ZW0uX3NpZ19zZXJ2ZXIpIHtcbiAgICAgIHRoaXMuYWRkX2F0dHIoe1xuICAgICAgICBuYW1lOiBcIkVuZHBvaW50IFwiICsgdGhpcy5pbmNyZW1lbnROYW1lSWQoKSxcbiAgICAgICAgaWQ6IHRoaXMuZ3VpZCgpLFxuICAgICAgICBkYXRhTmF0dXJlOiBuZXcgQ2hvaWNlKDAsIFtcIlRlbXBlcmF0dXJlXCIsIFwiSHVtaWRpdHlcIl0pLCAvLyBJIGRvbnQga25vdyBpZiB3ZSBrZWVwIHRoYXRcbiAgICAgICAgZGF0YVR5cGU6IG5ldyBDaG9pY2UoMCwgW1wiTnVsbFwiLCBcIkJvb2xlYW5cIiwgXCJVbnNpZ25lZFwiLFxuICAgICAgICAgIFwiVW5zaWduZWQ4XCIsIFwiVW5zaWduZWQxNlwiLCBcIlVuc2lnbmVkMzJcIiwgXCJJbnRlZ2VyXCIsXG4gICAgICAgICAgXCJJbnRlZ2VyMTZcIiwgXCJSZWFsXCIsIFwiRG91YmxlXCIsIFwiT2N0ZXRTdHJpbmdcIixcbiAgICAgICAgICBcIkNoYXJhY3RlclN0cmluZ1wiLCBcIkJpdFN0cmluZ1wiLCBcIkVudW1lcmF0ZWRcIiwgXCJEYXRlXCIsXG4gICAgICAgICAgXCJUaW1lXCIsIFwiQXJyYXlcIlxuICAgICAgICBdKSwgLy8gSSBkb250IGtub3cgaWYgd2Uga2VlcCB0aGF0XG4gICAgICAgIGN1cnJlbnRWYWx1ZTogMCxcbiAgICAgICAgcGF0aDogXCJcIixcbiAgICAgICAgbWluOiAwLFxuICAgICAgICBtYXg6IDAsXG4gICAgICAgIHVuaXQ6IFwiXCIsXG4gICAgICAgIGluR3JvdXA6IG5ldyBQdHIoX2dyb3VwIHx8IDApXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpbmNyZW1lbnROYW1lSWQoKSB7XG4gICAgZ2xvYmFsVHlwZS5vcGVyYXRpb25DZW50ZXIub3B0aW9ucy5lbmRwb2ludE5hbWVJZFxuICAgICAgLnNldChnbG9iYWxUeXBlLm9wZXJhdGlvbkNlbnRlci5vcHRpb25zLmVuZHBvaW50TmFtZUlkLmdldCgpICsgMSk7XG4gICAgcmV0dXJuIGdsb2JhbFR5cGUub3BlcmF0aW9uQ2VudGVyLm9wdGlvbnMuZW5kcG9pbnROYW1lSWQuZ2V0KCk7XG4gIH1cblxuICBzZXRHcm91cChfZ3JvdXApIHtcbiAgICB0aGlzLmluR3JvdXAuc2V0KF9ncm91cCk7XG4gIH1cblxuXG4gIGd1aWQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuY29uc3RydWN0b3IubmFtZSArXG4gICAgICBcIi1cIiArXG4gICAgICB0aGlzLnM0KCkgK1xuICAgICAgdGhpcy5zNCgpICtcbiAgICAgIFwiLVwiICtcbiAgICAgIHRoaXMuczQoKSArXG4gICAgICBcIi1cIiArXG4gICAgICB0aGlzLnM0KCkgK1xuICAgICAgXCItXCIgK1xuICAgICAgdGhpcy5zNCgpICtcbiAgICAgIFwiLVwiICtcbiAgICAgIHRoaXMuczQoKSArXG4gICAgICB0aGlzLnM0KCkgK1xuICAgICAgdGhpcy5zNCgpICtcbiAgICAgIFwiLVwiICtcbiAgICAgIERhdGUubm93KCkudG9TdHJpbmcoMTYpXG4gICAgKTtcbiAgfVxuXG4gIHM0KCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKVxuICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgLnN1YnN0cmluZygxKTtcbiAgfVxufVxuXG5zcGluYWxDb3JlLnJlZ2lzdGVyX21vZGVscyhbRW5kcG9pbnRdKSJdfQ==