"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _DeviceNode = require("./DeviceNode");

var _DeviceNode2 = _interopRequireDefault(_DeviceNode);

var _Device = require("./Device");

var _Device2 = _interopRequireDefault(_Device);

var _Forest = require("./Forest");

var _Forest2 = _interopRequireDefault(_Forest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;

let getViewer = function () {
  return globalType.v;
};
class DeviceForest extends _Forest2.default {
  constructor(_options) {
    super(_options);
    if (FileSystem._sig_server) {
      this.add_attr({
        deviceNameId: 0
      });
    }
  }

  incrementDeviceNameId() {
    this.deviceNameId.set(this.deviceNameId.get() + 1);
    return this.deviceNameId.get();
  }

  addDevice(_protocolType) {
    let device = new _Device2.default(_protocolType);
    device.setName(_protocolType + "-device" + " " + this.incrementChildNameId().toString());
    var tree = new _DeviceNode2.default(this, device, this.relOptions);
    this.list.push(tree);
  }

  // addDevice(_protocolType) {
  //   this.list.push(new Device(_protocolType, this.incrementDeviceNameId()))
  // }
}

exports.default = DeviceForest;
spinalCore.register_models([DeviceForest]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EZXZpY2VGb3Jlc3QuanMiXSwibmFtZXMiOlsic3BpbmFsQ29yZSIsInJlcXVpcmUiLCJnbG9iYWxUeXBlIiwid2luZG93IiwiZ2xvYmFsIiwiZ2V0Vmlld2VyIiwidiIsIkRldmljZUZvcmVzdCIsIkZvcmVzdCIsImNvbnN0cnVjdG9yIiwiX29wdGlvbnMiLCJGaWxlU3lzdGVtIiwiX3NpZ19zZXJ2ZXIiLCJhZGRfYXR0ciIsImRldmljZU5hbWVJZCIsImluY3JlbWVudERldmljZU5hbWVJZCIsInNldCIsImdldCIsImFkZERldmljZSIsIl9wcm90b2NvbFR5cGUiLCJkZXZpY2UiLCJEZXZpY2UiLCJzZXROYW1lIiwiaW5jcmVtZW50Q2hpbGROYW1lSWQiLCJ0b1N0cmluZyIsInRyZWUiLCJEZXZpY2VOb2RlIiwicmVsT3B0aW9ucyIsImxpc3QiLCJwdXNoIiwicmVnaXN0ZXJfbW9kZWxzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUpBLE1BQU1BLGFBQWFDLFFBQVEseUJBQVIsQ0FBbkI7QUFDQSxNQUFNQyxhQUFhLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NDLE1BQWhDLEdBQXlDRCxNQUE1RDs7QUFJQSxJQUFJRSxZQUFZLFlBQVc7QUFDekIsU0FBT0gsV0FBV0ksQ0FBbEI7QUFDRCxDQUZEO0FBR2UsTUFBTUMsWUFBTixTQUEyQkMsZ0JBQTNCLENBQWtDO0FBQy9DQyxjQUFZQyxRQUFaLEVBQXNCO0FBQ3BCLFVBQU1BLFFBQU47QUFDQSxRQUFJQyxXQUFXQyxXQUFmLEVBQTRCO0FBQzFCLFdBQUtDLFFBQUwsQ0FBYztBQUNaQyxzQkFBYztBQURGLE9BQWQ7QUFHRDtBQUNGOztBQUVEQywwQkFBd0I7QUFDdEIsU0FBS0QsWUFBTCxDQUFrQkUsR0FBbEIsQ0FBc0IsS0FBS0YsWUFBTCxDQUFrQkcsR0FBbEIsS0FBMEIsQ0FBaEQ7QUFDQSxXQUFPLEtBQUtILFlBQUwsQ0FBa0JHLEdBQWxCLEVBQVA7QUFDRDs7QUFFREMsWUFBVUMsYUFBVixFQUF5QjtBQUN2QixRQUFJQyxTQUFTLElBQUlDLGdCQUFKLENBQVdGLGFBQVgsQ0FBYjtBQUNBQyxXQUFPRSxPQUFQLENBQWVILGdCQUFnQixTQUFoQixHQUE0QixHQUE1QixHQUFrQyxLQUFLSSxvQkFBTCxHQUM5Q0MsUUFEOEMsRUFBakQ7QUFFQSxRQUFJQyxPQUFPLElBQUlDLG9CQUFKLENBQWUsSUFBZixFQUFxQk4sTUFBckIsRUFBNkIsS0FBS08sVUFBbEMsQ0FBWDtBQUNBLFNBQUtDLElBQUwsQ0FBVUMsSUFBVixDQUFlSixJQUFmO0FBQ0Q7O0FBR0Q7QUFDQTtBQUNBO0FBMUIrQzs7a0JBQTVCbEIsWTtBQTZCckJQLFdBQVc4QixlQUFYLENBQTJCLENBQUN2QixZQUFELENBQTNCIiwiZmlsZSI6IkRldmljZUZvcmVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNwaW5hbENvcmUgPSByZXF1aXJlKFwic3BpbmFsLWNvcmUtY29ubmVjdG9yanNcIik7XG5jb25zdCBnbG9iYWxUeXBlID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHdpbmRvdztcbmltcG9ydCBEZXZpY2VOb2RlIGZyb20gXCIuL0RldmljZU5vZGVcIlxuaW1wb3J0IERldmljZSBmcm9tIFwiLi9EZXZpY2VcIlxuaW1wb3J0IEZvcmVzdCBmcm9tIFwiLi9Gb3Jlc3RcIlxubGV0IGdldFZpZXdlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsVHlwZS52O1xufVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGV2aWNlRm9yZXN0IGV4dGVuZHMgRm9yZXN0IHtcbiAgY29uc3RydWN0b3IoX29wdGlvbnMpIHtcbiAgICBzdXBlcihfb3B0aW9ucyk7XG4gICAgaWYgKEZpbGVTeXN0ZW0uX3NpZ19zZXJ2ZXIpIHtcbiAgICAgIHRoaXMuYWRkX2F0dHIoe1xuICAgICAgICBkZXZpY2VOYW1lSWQ6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGluY3JlbWVudERldmljZU5hbWVJZCgpIHtcbiAgICB0aGlzLmRldmljZU5hbWVJZC5zZXQodGhpcy5kZXZpY2VOYW1lSWQuZ2V0KCkgKyAxKTtcbiAgICByZXR1cm4gdGhpcy5kZXZpY2VOYW1lSWQuZ2V0KCk7XG4gIH1cblxuICBhZGREZXZpY2UoX3Byb3RvY29sVHlwZSkge1xuICAgIGxldCBkZXZpY2UgPSBuZXcgRGV2aWNlKF9wcm90b2NvbFR5cGUpXG4gICAgZGV2aWNlLnNldE5hbWUoX3Byb3RvY29sVHlwZSArIFwiLWRldmljZVwiICsgXCIgXCIgKyB0aGlzLmluY3JlbWVudENoaWxkTmFtZUlkKClcbiAgICAgIC50b1N0cmluZygpKTtcbiAgICB2YXIgdHJlZSA9IG5ldyBEZXZpY2VOb2RlKHRoaXMsIGRldmljZSwgdGhpcy5yZWxPcHRpb25zKTtcbiAgICB0aGlzLmxpc3QucHVzaCh0cmVlKTtcbiAgfVxuXG5cbiAgLy8gYWRkRGV2aWNlKF9wcm90b2NvbFR5cGUpIHtcbiAgLy8gICB0aGlzLmxpc3QucHVzaChuZXcgRGV2aWNlKF9wcm90b2NvbFR5cGUsIHRoaXMuaW5jcmVtZW50RGV2aWNlTmFtZUlkKCkpKVxuICAvLyB9XG59XG5cbnNwaW5hbENvcmUucmVnaXN0ZXJfbW9kZWxzKFtEZXZpY2VGb3Jlc3RdKSJdfQ==