"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Endpoint = require("./Endpoint");

var _Endpoint2 = _interopRequireDefault(_Endpoint);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;
class EndpointGroup extends globalType.Model {
  constructor(_device, name = "EndpointGroup") {
    super();
    if (FileSystem._sig_server) {
      this.add_attr({
        name: "EndpointGroup " + this.incrementNameId(),
        id: this.guid(),
        list: new Lst(),
        inDevice: new Ptr(_device),
        type: new Choice(0, ["CVC", "other"])
      });
    }
  }

  incrementNameId() {
    globalType.operationCenter.options.endpointGroupNameId.set(globalType.operationCenter.options.endpointGroupNameId.get() + 1);
    return globalType.operationCenter.options.endpointGroupNameId.get();
  }

  guid() {
    return this.constructor.name + "-" + this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4() + "-" + Date.now().toString(16);
  }

  s4() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }

  createEndpoint() {
    let endpoint = new _Endpoint2.default(this);
    this.addEndpoint(endpoint);
  }

  addEndpoint(_endpoint) {
    this.list.push(_endpoint);
    this.inDevice.load(device => {
      device.defaultMeasurement.lst.push(_endpoint.name.get());
    });
  }
}

exports.default = EndpointGroup;
spinalCore.register_models([EndpointGroup]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9FbmRwb2ludEdyb3VwLmpzIl0sIm5hbWVzIjpbInNwaW5hbENvcmUiLCJyZXF1aXJlIiwiZ2xvYmFsVHlwZSIsIndpbmRvdyIsImdsb2JhbCIsIkVuZHBvaW50R3JvdXAiLCJNb2RlbCIsImNvbnN0cnVjdG9yIiwiX2RldmljZSIsIm5hbWUiLCJGaWxlU3lzdGVtIiwiX3NpZ19zZXJ2ZXIiLCJhZGRfYXR0ciIsImluY3JlbWVudE5hbWVJZCIsImlkIiwiZ3VpZCIsImxpc3QiLCJMc3QiLCJpbkRldmljZSIsIlB0ciIsInR5cGUiLCJDaG9pY2UiLCJvcGVyYXRpb25DZW50ZXIiLCJvcHRpb25zIiwiZW5kcG9pbnRHcm91cE5hbWVJZCIsInNldCIsImdldCIsInM0IiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwic3Vic3RyaW5nIiwiY3JlYXRlRW5kcG9pbnQiLCJlbmRwb2ludCIsIkVuZHBvaW50IiwiYWRkRW5kcG9pbnQiLCJfZW5kcG9pbnQiLCJwdXNoIiwibG9hZCIsImRldmljZSIsImRlZmF1bHRNZWFzdXJlbWVudCIsImxzdCIsInJlZ2lzdGVyX21vZGVscyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7Ozs7OztBQUZBLE1BQU1BLGFBQWFDLFFBQVEseUJBQVIsQ0FBbkI7QUFDQSxNQUFNQyxhQUFhLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NDLE1BQWhDLEdBQXlDRCxNQUE1RDtBQUdlLE1BQU1FLGFBQU4sU0FBNEJILFdBQVdJLEtBQXZDLENBQTZDO0FBQzFEQyxjQUFZQyxPQUFaLEVBQXFCQyxPQUFPLGVBQTVCLEVBQTZDO0FBQzNDO0FBQ0EsUUFBSUMsV0FBV0MsV0FBZixFQUE0QjtBQUMxQixXQUFLQyxRQUFMLENBQWM7QUFDWkgsY0FBTSxtQkFBbUIsS0FBS0ksZUFBTCxFQURiO0FBRVpDLFlBQUksS0FBS0MsSUFBTCxFQUZRO0FBR1pDLGNBQU0sSUFBSUMsR0FBSixFQUhNO0FBSVpDLGtCQUFVLElBQUlDLEdBQUosQ0FBUVgsT0FBUixDQUpFO0FBS1pZLGNBQU0sSUFBSUMsTUFBSixDQUFXLENBQVgsRUFBYyxDQUFDLEtBQUQsRUFBUSxPQUFSLENBQWQ7QUFMTSxPQUFkO0FBT0Q7QUFDRjs7QUFFRFIsb0JBQWtCO0FBQ2hCWCxlQUFXb0IsZUFBWCxDQUEyQkMsT0FBM0IsQ0FBbUNDLG1CQUFuQyxDQUNHQyxHQURILENBQ092QixXQUFXb0IsZUFBWCxDQUEyQkMsT0FBM0IsQ0FBbUNDLG1CQUFuQyxDQUF1REUsR0FBdkQsS0FBK0QsQ0FEdEU7QUFFQSxXQUFPeEIsV0FBV29CLGVBQVgsQ0FBMkJDLE9BQTNCLENBQW1DQyxtQkFBbkMsQ0FBdURFLEdBQXZELEVBQVA7QUFDRDs7QUFFRFgsU0FBTztBQUNMLFdBQ0UsS0FBS1IsV0FBTCxDQUFpQkUsSUFBakIsR0FDQSxHQURBLEdBRUEsS0FBS2tCLEVBQUwsRUFGQSxHQUdBLEtBQUtBLEVBQUwsRUFIQSxHQUlBLEdBSkEsR0FLQSxLQUFLQSxFQUFMLEVBTEEsR0FNQSxHQU5BLEdBT0EsS0FBS0EsRUFBTCxFQVBBLEdBUUEsR0FSQSxHQVNBLEtBQUtBLEVBQUwsRUFUQSxHQVVBLEdBVkEsR0FXQSxLQUFLQSxFQUFMLEVBWEEsR0FZQSxLQUFLQSxFQUFMLEVBWkEsR0FhQSxLQUFLQSxFQUFMLEVBYkEsR0FjQSxHQWRBLEdBZUFDLEtBQUtDLEdBQUwsR0FBV0MsUUFBWCxDQUFvQixFQUFwQixDQWhCRjtBQWtCRDs7QUFFREgsT0FBSztBQUNILFdBQU9JLEtBQUtDLEtBQUwsQ0FBVyxDQUFDLElBQUlELEtBQUtFLE1BQUwsRUFBTCxJQUFzQixPQUFqQyxFQUNKSCxRQURJLENBQ0ssRUFETCxFQUVKSSxTQUZJLENBRU0sQ0FGTixDQUFQO0FBR0Q7O0FBRURDLG1CQUFpQjtBQUNmLFFBQUlDLFdBQVcsSUFBSUMsa0JBQUosQ0FBYSxJQUFiLENBQWY7QUFDQSxTQUFLQyxXQUFMLENBQWlCRixRQUFqQjtBQUNEOztBQUVERSxjQUFZQyxTQUFaLEVBQXVCO0FBQ3JCLFNBQUt2QixJQUFMLENBQVV3QixJQUFWLENBQWVELFNBQWY7QUFDQSxTQUFLckIsUUFBTCxDQUFjdUIsSUFBZCxDQUFtQkMsVUFBVTtBQUMzQkEsYUFBT0Msa0JBQVAsQ0FBMEJDLEdBQTFCLENBQThCSixJQUE5QixDQUFtQ0QsVUFBVTlCLElBQVYsQ0FBZWlCLEdBQWYsRUFBbkM7QUFDRCxLQUZEO0FBR0Q7QUF6RHlEOztrQkFBdkNyQixhO0FBNERyQkwsV0FBVzZDLGVBQVgsQ0FBMkIsQ0FBQ3hDLGFBQUQsQ0FBM0IiLCJmaWxlIjoiRW5kcG9pbnRHcm91cC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNwaW5hbENvcmUgPSByZXF1aXJlKFwic3BpbmFsLWNvcmUtY29ubmVjdG9yanNcIik7XG5jb25zdCBnbG9iYWxUeXBlID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHdpbmRvdztcbmltcG9ydCBFbmRwb2ludCBmcm9tIFwiLi9FbmRwb2ludFwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuZHBvaW50R3JvdXAgZXh0ZW5kcyBnbG9iYWxUeXBlLk1vZGVsIHtcbiAgY29uc3RydWN0b3IoX2RldmljZSwgbmFtZSA9IFwiRW5kcG9pbnRHcm91cFwiKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpZiAoRmlsZVN5c3RlbS5fc2lnX3NlcnZlcikge1xuICAgICAgdGhpcy5hZGRfYXR0cih7XG4gICAgICAgIG5hbWU6IFwiRW5kcG9pbnRHcm91cCBcIiArIHRoaXMuaW5jcmVtZW50TmFtZUlkKCksXG4gICAgICAgIGlkOiB0aGlzLmd1aWQoKSxcbiAgICAgICAgbGlzdDogbmV3IExzdCgpLFxuICAgICAgICBpbkRldmljZTogbmV3IFB0cihfZGV2aWNlKSxcbiAgICAgICAgdHlwZTogbmV3IENob2ljZSgwLCBbXCJDVkNcIiwgXCJvdGhlclwiXSksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpbmNyZW1lbnROYW1lSWQoKSB7XG4gICAgZ2xvYmFsVHlwZS5vcGVyYXRpb25DZW50ZXIub3B0aW9ucy5lbmRwb2ludEdyb3VwTmFtZUlkXG4gICAgICAuc2V0KGdsb2JhbFR5cGUub3BlcmF0aW9uQ2VudGVyLm9wdGlvbnMuZW5kcG9pbnRHcm91cE5hbWVJZC5nZXQoKSArIDEpO1xuICAgIHJldHVybiBnbG9iYWxUeXBlLm9wZXJhdGlvbkNlbnRlci5vcHRpb25zLmVuZHBvaW50R3JvdXBOYW1lSWQuZ2V0KCk7XG4gIH1cblxuICBndWlkKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgK1xuICAgICAgXCItXCIgK1xuICAgICAgdGhpcy5zNCgpICtcbiAgICAgIHRoaXMuczQoKSArXG4gICAgICBcIi1cIiArXG4gICAgICB0aGlzLnM0KCkgK1xuICAgICAgXCItXCIgK1xuICAgICAgdGhpcy5zNCgpICtcbiAgICAgIFwiLVwiICtcbiAgICAgIHRoaXMuczQoKSArXG4gICAgICBcIi1cIiArXG4gICAgICB0aGlzLnM0KCkgK1xuICAgICAgdGhpcy5zNCgpICtcbiAgICAgIHRoaXMuczQoKSArXG4gICAgICBcIi1cIiArXG4gICAgICBEYXRlLm5vdygpLnRvU3RyaW5nKDE2KVxuICAgICk7XG4gIH1cblxuICBzNCgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcbiAgICAgIC50b1N0cmluZygxNilcbiAgICAgIC5zdWJzdHJpbmcoMSk7XG4gIH1cblxuICBjcmVhdGVFbmRwb2ludCgpIHtcbiAgICBsZXQgZW5kcG9pbnQgPSBuZXcgRW5kcG9pbnQodGhpcylcbiAgICB0aGlzLmFkZEVuZHBvaW50KGVuZHBvaW50KVxuICB9XG5cbiAgYWRkRW5kcG9pbnQoX2VuZHBvaW50KSB7XG4gICAgdGhpcy5saXN0LnB1c2goX2VuZHBvaW50KVxuICAgIHRoaXMuaW5EZXZpY2UubG9hZChkZXZpY2UgPT4ge1xuICAgICAgZGV2aWNlLmRlZmF1bHRNZWFzdXJlbWVudC5sc3QucHVzaChfZW5kcG9pbnQubmFtZS5nZXQoKSlcbiAgICB9KVxuICB9XG59XG5cbnNwaW5hbENvcmUucmVnaXN0ZXJfbW9kZWxzKFtFbmRwb2ludEdyb3VwXSkiXX0=