"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;

class OperationCenterObject extends globalType.Model {
  constructor(_id, name = "OperationCenterObject") {
    super();
    let _name = typeof _id === "undefinded" ? "" : this.constructor.name + _id;
    if (FileSystem._sig_server) {
      this.add_attr({
        name: _name,
        id: this.guid()
      });
    }
  }

  guid() {
    return this.constructor.name + "-" + this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4() + "-" + Date.now().toString(16);
  }

  s4() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }

  setName(_name) {
    this.name.set(_name);
  }

  // relationExists(_relation) {
  //   for (let index = 0; index < this.attr_attribute_names.length; index++) {
  //     const attribute = this.attr_attribute_names[index];
  //     if (attribute === _relation)
  //     return 
  //   }
  // }

  addRelation(_relation, _elements) {
    let attributeIndex = this._attribute_names.indexOf(_relation);
    if (attributeIndex === -1) {
      this.add_attr({
        [_relation]: new Ptr(new Lst())
      });
    }
    if (Array.isArray(_elements)) for (let index = 0; index < _elements.length; index++) {
      const element = _elements[index];
      this[_relation].load(rel => {
        rel.push(element);
      });
    } else this[_relation].load(rel => {
      rel.push(_elements);
    });
  }
}

exports.default = OperationCenterObject;
spinalCore.register_models([OperationCenterObject]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9PcGVyYXRpb25DZW50ZXJPYmplY3QuanMiXSwibmFtZXMiOlsic3BpbmFsQ29yZSIsInJlcXVpcmUiLCJnbG9iYWxUeXBlIiwid2luZG93IiwiZ2xvYmFsIiwiT3BlcmF0aW9uQ2VudGVyT2JqZWN0IiwiTW9kZWwiLCJjb25zdHJ1Y3RvciIsIl9pZCIsIm5hbWUiLCJfbmFtZSIsIkZpbGVTeXN0ZW0iLCJfc2lnX3NlcnZlciIsImFkZF9hdHRyIiwiaWQiLCJndWlkIiwiczQiLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJzdWJzdHJpbmciLCJzZXROYW1lIiwic2V0IiwiYWRkUmVsYXRpb24iLCJfcmVsYXRpb24iLCJfZWxlbWVudHMiLCJhdHRyaWJ1dGVJbmRleCIsIl9hdHRyaWJ1dGVfbmFtZXMiLCJpbmRleE9mIiwiUHRyIiwiTHN0IiwiQXJyYXkiLCJpc0FycmF5IiwiaW5kZXgiLCJsZW5ndGgiLCJlbGVtZW50IiwibG9hZCIsInJlbCIsInB1c2giLCJyZWdpc3Rlcl9tb2RlbHMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsYUFBYUMsUUFBUSx5QkFBUixDQUFuQjtBQUNBLE1BQU1DLGFBQWEsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0MsTUFBaEMsR0FBeUNELE1BQTVEOztBQUVlLE1BQU1FLHFCQUFOLFNBQW9DSCxXQUFXSSxLQUEvQyxDQUFxRDtBQUNsRUMsY0FBWUMsR0FBWixFQUFpQkMsT0FBTyx1QkFBeEIsRUFBaUQ7QUFDL0M7QUFDQSxRQUFJQyxRQUFRLE9BQU9GLEdBQVAsS0FBZSxZQUFmLEdBQThCLEVBQTlCLEdBQW1DLEtBQUtELFdBQUwsQ0FBaUJFLElBQWpCLEdBQzdDRCxHQURGO0FBRUEsUUFBSUcsV0FBV0MsV0FBZixFQUE0QjtBQUMxQixXQUFLQyxRQUFMLENBQWM7QUFDWkosY0FBTUMsS0FETTtBQUVaSSxZQUFJLEtBQUtDLElBQUw7QUFGUSxPQUFkO0FBSUQ7QUFDRjs7QUFFREEsU0FBTztBQUNMLFdBQ0UsS0FBS1IsV0FBTCxDQUFpQkUsSUFBakIsR0FDQSxHQURBLEdBRUEsS0FBS08sRUFBTCxFQUZBLEdBR0EsS0FBS0EsRUFBTCxFQUhBLEdBSUEsR0FKQSxHQUtBLEtBQUtBLEVBQUwsRUFMQSxHQU1BLEdBTkEsR0FPQSxLQUFLQSxFQUFMLEVBUEEsR0FRQSxHQVJBLEdBU0EsS0FBS0EsRUFBTCxFQVRBLEdBVUEsR0FWQSxHQVdBLEtBQUtBLEVBQUwsRUFYQSxHQVlBLEtBQUtBLEVBQUwsRUFaQSxHQWFBLEtBQUtBLEVBQUwsRUFiQSxHQWNBLEdBZEEsR0FlQUMsS0FBS0MsR0FBTCxHQUFXQyxRQUFYLENBQW9CLEVBQXBCLENBaEJGO0FBa0JEOztBQUVESCxPQUFLO0FBQ0gsV0FBT0ksS0FBS0MsS0FBTCxDQUFXLENBQUMsSUFBSUQsS0FBS0UsTUFBTCxFQUFMLElBQXNCLE9BQWpDLEVBQ0pILFFBREksQ0FDSyxFQURMLEVBRUpJLFNBRkksQ0FFTSxDQUZOLENBQVA7QUFHRDs7QUFFREMsVUFBUWQsS0FBUixFQUFlO0FBQ2IsU0FBS0QsSUFBTCxDQUFVZ0IsR0FBVixDQUFjZixLQUFkO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFnQixjQUFZQyxTQUFaLEVBQXVCQyxTQUF2QixFQUFrQztBQUNoQyxRQUFJQyxpQkFBaUIsS0FBS0MsZ0JBQUwsQ0FBc0JDLE9BQXRCLENBQThCSixTQUE5QixDQUFyQjtBQUNBLFFBQUlFLG1CQUFtQixDQUFDLENBQXhCLEVBQTJCO0FBQ3pCLFdBQUtoQixRQUFMLENBQWM7QUFDWixTQUFDYyxTQUFELEdBQWEsSUFBSUssR0FBSixDQUFRLElBQUlDLEdBQUosRUFBUjtBQURELE9BQWQ7QUFHRDtBQUNELFFBQUlDLE1BQU1DLE9BQU4sQ0FBY1AsU0FBZCxDQUFKLEVBQ0UsS0FBSyxJQUFJUSxRQUFRLENBQWpCLEVBQW9CQSxRQUFRUixVQUFVUyxNQUF0QyxFQUE4Q0QsT0FBOUMsRUFBdUQ7QUFDckQsWUFBTUUsVUFBVVYsVUFBVVEsS0FBVixDQUFoQjtBQUNBLFdBQUtULFNBQUwsRUFBZ0JZLElBQWhCLENBQXFCQyxPQUFPO0FBQzFCQSxZQUFJQyxJQUFKLENBQVNILE9BQVQ7QUFDRCxPQUZEO0FBR0QsS0FOSCxNQVFFLEtBQUtYLFNBQUwsRUFBZ0JZLElBQWhCLENBQXFCQyxPQUFPO0FBQzFCQSxVQUFJQyxJQUFKLENBQVNiLFNBQVQ7QUFDRCxLQUZEO0FBR0g7QUF0RWlFOztrQkFBL0N2QixxQjtBQXlFckJMLFdBQVcwQyxlQUFYLENBQTJCLENBQUNyQyxxQkFBRCxDQUEzQiIsImZpbGUiOiJPcGVyYXRpb25DZW50ZXJPYmplY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzcGluYWxDb3JlID0gcmVxdWlyZShcInNwaW5hbC1jb3JlLWNvbm5lY3RvcmpzXCIpO1xuY29uc3QgZ2xvYmFsVHlwZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB3aW5kb3c7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZXJhdGlvbkNlbnRlck9iamVjdCBleHRlbmRzIGdsb2JhbFR5cGUuTW9kZWwge1xuICBjb25zdHJ1Y3RvcihfaWQsIG5hbWUgPSBcIk9wZXJhdGlvbkNlbnRlck9iamVjdFwiKSB7XG4gICAgc3VwZXIoKTtcbiAgICBsZXQgX25hbWUgPSB0eXBlb2YgX2lkID09PSBcInVuZGVmaW5kZWRcIiA/IFwiXCIgOiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgK1xuICAgICAgX2lkXG4gICAgaWYgKEZpbGVTeXN0ZW0uX3NpZ19zZXJ2ZXIpIHtcbiAgICAgIHRoaXMuYWRkX2F0dHIoe1xuICAgICAgICBuYW1lOiBfbmFtZSxcbiAgICAgICAgaWQ6IHRoaXMuZ3VpZCgpLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZ3VpZCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICtcbiAgICAgIFwiLVwiICtcbiAgICAgIHRoaXMuczQoKSArXG4gICAgICB0aGlzLnM0KCkgK1xuICAgICAgXCItXCIgK1xuICAgICAgdGhpcy5zNCgpICtcbiAgICAgIFwiLVwiICtcbiAgICAgIHRoaXMuczQoKSArXG4gICAgICBcIi1cIiArXG4gICAgICB0aGlzLnM0KCkgK1xuICAgICAgXCItXCIgK1xuICAgICAgdGhpcy5zNCgpICtcbiAgICAgIHRoaXMuczQoKSArXG4gICAgICB0aGlzLnM0KCkgK1xuICAgICAgXCItXCIgK1xuICAgICAgRGF0ZS5ub3coKS50b1N0cmluZygxNilcbiAgICApO1xuICB9XG5cbiAgczQoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApXG4gICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAuc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgc2V0TmFtZShfbmFtZSkge1xuICAgIHRoaXMubmFtZS5zZXQoX25hbWUpXG4gIH1cblxuICAvLyByZWxhdGlvbkV4aXN0cyhfcmVsYXRpb24pIHtcbiAgLy8gICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5hdHRyX2F0dHJpYnV0ZV9uYW1lcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgLy8gICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRoaXMuYXR0cl9hdHRyaWJ1dGVfbmFtZXNbaW5kZXhdO1xuICAvLyAgICAgaWYgKGF0dHJpYnV0ZSA9PT0gX3JlbGF0aW9uKVxuICAvLyAgICAgcmV0dXJuIFxuICAvLyAgIH1cbiAgLy8gfVxuXG4gIGFkZFJlbGF0aW9uKF9yZWxhdGlvbiwgX2VsZW1lbnRzKSB7XG4gICAgbGV0IGF0dHJpYnV0ZUluZGV4ID0gdGhpcy5fYXR0cmlidXRlX25hbWVzLmluZGV4T2YoX3JlbGF0aW9uKVxuICAgIGlmIChhdHRyaWJ1dGVJbmRleCA9PT0gLTEpIHtcbiAgICAgIHRoaXMuYWRkX2F0dHIoe1xuICAgICAgICBbX3JlbGF0aW9uXTogbmV3IFB0cihuZXcgTHN0KCkpXG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShfZWxlbWVudHMpKVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IF9lbGVtZW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IF9lbGVtZW50c1tpbmRleF07XG4gICAgICAgIHRoaXNbX3JlbGF0aW9uXS5sb2FkKHJlbCA9PiB7XG4gICAgICAgICAgcmVsLnB1c2goZWxlbWVudClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICBlbHNlXG4gICAgICB0aGlzW19yZWxhdGlvbl0ubG9hZChyZWwgPT4ge1xuICAgICAgICByZWwucHVzaChfZWxlbWVudHMpXG4gICAgICB9KVxuICB9XG59XG5cbnNwaW5hbENvcmUucmVnaXN0ZXJfbW9kZWxzKFtPcGVyYXRpb25DZW50ZXJPYmplY3RdKSJdfQ==