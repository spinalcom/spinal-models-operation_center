"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _OperationCenterObject = require("./OperationCenterObject");

var _OperationCenterObject2 = _interopRequireDefault(_OperationCenterObject);

var _SpinalBIMGroupOC = require("./SpinalBIMGroupOC");

var _SpinalBIMGroupOC2 = _interopRequireDefault(_SpinalBIMGroupOC);

var _RelEquipementDevice = require("./RelEquipementDevice");

var _RelEquipementDevice2 = _interopRequireDefault(_RelEquipementDevice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;
class Zone extends _OperationCenterObject2.default {
  constructor(_type, _id, name = "Zone") {
    if (typeof _id === "undefined") super();else super(_id);
    if (FileSystem._sig_server) {
      this.add_attr({
        // BIMGroup: new SpinalBIMGroupOC(),
        type: new Choice(0, ["Zone", "Equipement", "Structure"])
      });
      this.type.set(_type || "Zone");
      if (this.type.get() === "Equipement") this.add_attr({
        relEquipementDevice: new Ptr(new _RelEquipementDevice2.default(this, 0))
      });
    }
    if (typeof this['relZoneContains'] === "undefined") {
      let BIMGroup = new _SpinalBIMGroupOC2.default();
      this.addRelation('relZoneContains', BIMGroup);
    }
  }

  isEquipement() {
    return this.type.get() === "Equipement";
  }

  toString() {
    return "Zone(" + this.name.get() + ", " + this.id.get() + ", " + this.BIMGroup.id.get() + ", " + this.type.get() + ");";
  }
}

exports.default = Zone;
spinalCore.register_models([Zone]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ab25lLmpzIl0sIm5hbWVzIjpbInNwaW5hbENvcmUiLCJyZXF1aXJlIiwiZ2xvYmFsVHlwZSIsIndpbmRvdyIsImdsb2JhbCIsIlpvbmUiLCJPcGVyYXRpb25DZW50ZXJPYmplY3QiLCJjb25zdHJ1Y3RvciIsIl90eXBlIiwiX2lkIiwibmFtZSIsIkZpbGVTeXN0ZW0iLCJfc2lnX3NlcnZlciIsImFkZF9hdHRyIiwidHlwZSIsIkNob2ljZSIsInNldCIsImdldCIsInJlbEVxdWlwZW1lbnREZXZpY2UiLCJQdHIiLCJSZWxFcXVpcGVtZW50RGV2aWNlIiwiQklNR3JvdXAiLCJTcGluYWxCSU1Hcm91cE9DIiwiYWRkUmVsYXRpb24iLCJpc0VxdWlwZW1lbnQiLCJ0b1N0cmluZyIsImlkIiwicmVnaXN0ZXJfbW9kZWxzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUpBLE1BQU1BLGFBQWFDLFFBQVEseUJBQVIsQ0FBbkI7QUFDQSxNQUFNQyxhQUFhLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NDLE1BQWhDLEdBQXlDRCxNQUE1RDtBQU1lLE1BQU1FLElBQU4sU0FBbUJDLCtCQUFuQixDQUF5QztBQUN0REMsY0FBWUMsS0FBWixFQUFtQkMsR0FBbkIsRUFBd0JDLE9BQU8sTUFBL0IsRUFBdUM7QUFDckMsUUFBSSxPQUFPRCxHQUFQLEtBQWUsV0FBbkIsRUFDRSxRQURGLEtBR0UsTUFBTUEsR0FBTjtBQUNGLFFBQUlFLFdBQVdDLFdBQWYsRUFBNEI7QUFDMUIsV0FBS0MsUUFBTCxDQUFjO0FBQ1o7QUFDQUMsY0FBTSxJQUFJQyxNQUFKLENBQVcsQ0FBWCxFQUFjLENBQUMsTUFBRCxFQUFTLFlBQVQsRUFBdUIsV0FBdkIsQ0FBZDtBQUZNLE9BQWQ7QUFJQSxXQUFLRCxJQUFMLENBQVVFLEdBQVYsQ0FBY1IsU0FBUyxNQUF2QjtBQUNBLFVBQUksS0FBS00sSUFBTCxDQUFVRyxHQUFWLE9BQW9CLFlBQXhCLEVBQ0UsS0FBS0osUUFBTCxDQUFjO0FBQ1pLLDZCQUFxQixJQUFJQyxHQUFKLENBQVEsSUFBSUMsNkJBQUosQ0FBd0IsSUFBeEIsRUFBOEIsQ0FBOUIsQ0FBUjtBQURULE9BQWQ7QUFHSDtBQUNELFFBQUksT0FBTyxLQUFLLGlCQUFMLENBQVAsS0FBbUMsV0FBdkMsRUFBb0Q7QUFDbEQsVUFBSUMsV0FBVyxJQUFJQywwQkFBSixFQUFmO0FBQ0EsV0FBS0MsV0FBTCxDQUFpQixpQkFBakIsRUFBb0NGLFFBQXBDO0FBQ0Q7QUFHRjs7QUFHREcsaUJBQWU7QUFDYixXQUFPLEtBQUtWLElBQUwsQ0FBVUcsR0FBVixPQUFvQixZQUEzQjtBQUNEOztBQUVEUSxhQUFXO0FBQ1QsV0FBTyxVQUFVLEtBQUtmLElBQUwsQ0FBVU8sR0FBVixFQUFWLEdBQTRCLElBQTVCLEdBQW1DLEtBQUtTLEVBQUwsQ0FBUVQsR0FBUixFQUFuQyxHQUFtRCxJQUFuRCxHQUNMLEtBQUtJLFFBQUwsQ0FBY0ssRUFBZCxDQUFpQlQsR0FBakIsRUFESyxHQUNvQixJQURwQixHQUMyQixLQUFLSCxJQUFMLENBQVVHLEdBQVYsRUFEM0IsR0FDNkMsSUFEcEQ7QUFFRDtBQWpDcUQ7O2tCQUFuQ1osSTtBQW9DckJMLFdBQVcyQixlQUFYLENBQTJCLENBQUN0QixJQUFELENBQTNCIiwiZmlsZSI6IlpvbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzcGluYWxDb3JlID0gcmVxdWlyZShcInNwaW5hbC1jb3JlLWNvbm5lY3RvcmpzXCIpO1xuY29uc3QgZ2xvYmFsVHlwZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB3aW5kb3c7XG5pbXBvcnQgT3BlcmF0aW9uQ2VudGVyT2JqZWN0IGZyb20gXCIuL09wZXJhdGlvbkNlbnRlck9iamVjdFwiXG5pbXBvcnQgU3BpbmFsQklNR3JvdXBPQyBmcm9tIFwiLi9TcGluYWxCSU1Hcm91cE9DXCJcbmltcG9ydCBSZWxFcXVpcGVtZW50RGV2aWNlIGZyb20gXCIuL1JlbEVxdWlwZW1lbnREZXZpY2VcIlxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFpvbmUgZXh0ZW5kcyBPcGVyYXRpb25DZW50ZXJPYmplY3Qge1xuICBjb25zdHJ1Y3RvcihfdHlwZSwgX2lkLCBuYW1lID0gXCJab25lXCIpIHtcbiAgICBpZiAodHlwZW9mIF9pZCA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgIHN1cGVyKCk7XG4gICAgZWxzZVxuICAgICAgc3VwZXIoX2lkKTtcbiAgICBpZiAoRmlsZVN5c3RlbS5fc2lnX3NlcnZlcikge1xuICAgICAgdGhpcy5hZGRfYXR0cih7XG4gICAgICAgIC8vIEJJTUdyb3VwOiBuZXcgU3BpbmFsQklNR3JvdXBPQygpLFxuICAgICAgICB0eXBlOiBuZXcgQ2hvaWNlKDAsIFtcIlpvbmVcIiwgXCJFcXVpcGVtZW50XCIsIFwiU3RydWN0dXJlXCJdKVxuICAgICAgfSk7XG4gICAgICB0aGlzLnR5cGUuc2V0KF90eXBlIHx8IFwiWm9uZVwiKTtcbiAgICAgIGlmICh0aGlzLnR5cGUuZ2V0KCkgPT09IFwiRXF1aXBlbWVudFwiKVxuICAgICAgICB0aGlzLmFkZF9hdHRyKHtcbiAgICAgICAgICByZWxFcXVpcGVtZW50RGV2aWNlOiBuZXcgUHRyKG5ldyBSZWxFcXVpcGVtZW50RGV2aWNlKHRoaXMsIDApKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzWydyZWxab25lQ29udGFpbnMnXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgbGV0IEJJTUdyb3VwID0gbmV3IFNwaW5hbEJJTUdyb3VwT0MoKTtcbiAgICAgIHRoaXMuYWRkUmVsYXRpb24oJ3JlbFpvbmVDb250YWlucycsIEJJTUdyb3VwKVxuICAgIH1cblxuXG4gIH1cblxuXG4gIGlzRXF1aXBlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlLmdldCgpID09PSBcIkVxdWlwZW1lbnRcIjtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBcIlpvbmUoXCIgKyB0aGlzLm5hbWUuZ2V0KCkgKyBcIiwgXCIgKyB0aGlzLmlkLmdldCgpICsgXCIsIFwiICtcbiAgICAgIHRoaXMuQklNR3JvdXAuaWQuZ2V0KCkgKyBcIiwgXCIgKyB0aGlzLnR5cGUuZ2V0KCkgKyBcIik7XCJcbiAgfVxufVxuXG5zcGluYWxDb3JlLnJlZ2lzdGVyX21vZGVscyhbWm9uZV0pIl19