"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ZoneNode = require("./ZoneNode");

var _ZoneNode2 = _interopRequireDefault(_ZoneNode);

var _Forest = require("./Forest");

var _Forest2 = _interopRequireDefault(_Forest);

var _Zone = require("./Zone");

var _Zone2 = _interopRequireDefault(_Zone);

var _RelZoneAggregates = require("./RelZoneAggregates");

var _RelZoneAggregates2 = _interopRequireDefault(_RelZoneAggregates);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;

let getViewer = function () {
  return globalType.v;
};
class ZoneForest extends _Forest2.default {
  constructor(_options) {
    super(_options);
    if (FileSystem._sig_server) {
      this.add_attr({
        coloringType: 0
      });
    }
  }

  addTree(_type, _relZoneAggregatesList, _zoneList) {
    let zone = new _Zone2.default(_type);
    zone.setName(_type + " " + this.incrementChildNameId().toString());
    _zoneList.addZone(zone);
    var tree = new _ZoneNode2.default(0, zone, this.relOptions);
    this.list.push(tree);
    if (!_relZoneAggregatesList.containsByRelatingId(0)) _relZoneAggregatesList.addRelZoneAggregates(0, [zone]);else {
      let rel = _relZoneAggregatesList.getByRelatingId(0);
      try {
        rel.addRelatedObjects(zone);
      } catch (error) {
        console.error('adding rel to _relZoneAggregatesList ');
      }
    }
  }

  addTreeFromRelation(_zone) {
    var tree = new _ZoneNode2.default(0, _zone, this.relOptions);
    this.list.push(tree);
  }

  getSpinalNodeByZoneId(_id) {
    for (let index = 0; index < this.list.length; index++) {
      const spinalNode = this.list[index];
      let res = spinalNode.getSpinalNodeByZoneId(_id);
      if (res != null) return spinalNode;
    }
  }

  getEquipements() {
    let equipementsArray = [];
    for (let i = 0; i < this.list.length; i++) {
      const tree = this.list[i].element;
      equipementsArray = equipementsArray.concat(tree.getEquipements());
    }
    return equipementsArray;
  }

  async getAllBIMGroups() {
    let res = [];
    for (let i = 0; i < this.list.length; i++) {
      const tree = this.list[i];
      let tmp = await tree.getAllBIMGroups();
      // if (tmp != null)
      res = res.concat(tmp);
    }
    return res;
  }

  async getAllBIMObjectsIds() {
    let res = [];
    let BIMGroups = await this.getAllBIMGroups();
    for (let index = 0; index < BIMGroups.length; index++) {
      const element = BIMGroups[index];
      res = res.concat(element.arrayOfId());
    }
    return res;
  }

  restoreColorMaterial() {
    if (this.coloringType === 1) getViewer().clearThemingColors();else {
      getViewer().restoreColorMaterial(this.getAllBIMObjectsIds());
    }
  }

  async refreshAllColors() {
    let BIMGroups = await this.getAllBIMGroups();
    for (let index = 0; index < BIMGroups.length; index++) {
      const element = BIMGroups[index];
      if (element.currentValue.get() !== 0 && element.display.get()) {
        element.refreshColors(this.coloringType);
      }
    }
  }

  async activateAllBIMGroups() {
    let t = await this.getAllBIMGroups();
    for (let index = 0; index < t.length; index++) {
      const element = t[index];
      element.active.set(true);
    }
  }

  async disactivateAllBIMGroups() {
    let t = await this.getAllBIMGroups();
    for (let index = 0; index < t.length; index++) {
      const element = t[index];
      element.active.set(false);
    }
  }

}

exports.default = ZoneForest;
spinalCore.register_models([ZoneForest]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ab25lRm9yZXN0LmpzIl0sIm5hbWVzIjpbInNwaW5hbENvcmUiLCJyZXF1aXJlIiwiZ2xvYmFsVHlwZSIsIndpbmRvdyIsImdsb2JhbCIsImdldFZpZXdlciIsInYiLCJab25lRm9yZXN0IiwiRm9yZXN0IiwiY29uc3RydWN0b3IiLCJfb3B0aW9ucyIsIkZpbGVTeXN0ZW0iLCJfc2lnX3NlcnZlciIsImFkZF9hdHRyIiwiY29sb3JpbmdUeXBlIiwiYWRkVHJlZSIsIl90eXBlIiwiX3JlbFpvbmVBZ2dyZWdhdGVzTGlzdCIsIl96b25lTGlzdCIsInpvbmUiLCJab25lIiwic2V0TmFtZSIsImluY3JlbWVudENoaWxkTmFtZUlkIiwidG9TdHJpbmciLCJhZGRab25lIiwidHJlZSIsIlpvbmVOb2RlIiwicmVsT3B0aW9ucyIsImxpc3QiLCJwdXNoIiwiY29udGFpbnNCeVJlbGF0aW5nSWQiLCJhZGRSZWxab25lQWdncmVnYXRlcyIsInJlbCIsImdldEJ5UmVsYXRpbmdJZCIsImFkZFJlbGF0ZWRPYmplY3RzIiwiZXJyb3IiLCJjb25zb2xlIiwiYWRkVHJlZUZyb21SZWxhdGlvbiIsIl96b25lIiwiZ2V0U3BpbmFsTm9kZUJ5Wm9uZUlkIiwiX2lkIiwiaW5kZXgiLCJsZW5ndGgiLCJzcGluYWxOb2RlIiwicmVzIiwiZ2V0RXF1aXBlbWVudHMiLCJlcXVpcGVtZW50c0FycmF5IiwiaSIsImVsZW1lbnQiLCJjb25jYXQiLCJnZXRBbGxCSU1Hcm91cHMiLCJ0bXAiLCJnZXRBbGxCSU1PYmplY3RzSWRzIiwiQklNR3JvdXBzIiwiYXJyYXlPZklkIiwicmVzdG9yZUNvbG9yTWF0ZXJpYWwiLCJjbGVhclRoZW1pbmdDb2xvcnMiLCJyZWZyZXNoQWxsQ29sb3JzIiwiY3VycmVudFZhbHVlIiwiZ2V0IiwiZGlzcGxheSIsInJlZnJlc2hDb2xvcnMiLCJhY3RpdmF0ZUFsbEJJTUdyb3VwcyIsInQiLCJhY3RpdmUiLCJzZXQiLCJkaXNhY3RpdmF0ZUFsbEJJTUdy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VCxRQUFRLENBQWpCLEVBQW9CQSxRQUFRc0IsRUFBRXJCLE1BQTlCLEVBQXNDRCxPQUF0QyxFQUErQztBQUM3QyxZQUFNTyxVQUFVZSxFQUFFdEIsS0FBRixDQUFoQjtBQUNBTyxjQUFRZ0IsTUFBUixDQUFlQyxHQUFmLENBQW1CLElBQW5CO0FBQ0Q7QUFDRjs7QUFFRCxRQUFNQyx1QkFBTixHQUFnQztBQUM5QixRQUFJSCxJQUFJLE1BQU0sS0FBS2IsZUFBTCxFQUFkO0FBQ0EsU0FBSyxJQUFJVCxRQUFRLENBQWpCLEVBQW9CQSxRQUFRc0IsRUFBRXJCLE1BQTlCLEVBQXNDRCxPQUF0QyxFQUErQztBQUM3QyxZQUFNTyxVQUFVZSxFQUFFdEIsS0FBRixDQUFoQjtBQUNBTyxjQUFRZ0IsTUFBUixDQUFlQyxHQUFmLENBQW1CLEtBQW5CO0FBQ0Q7QUFDRjs7QUExRzRDOztrQkFBMUIxRCxVO0FBOEdyQlAsV0FBV21FLGVBQVgsQ0FBMkIsQ0FBQzVELFVBQUQsQ0FBM0IiLCJmaWxlIjoiWm9uZUZvcmVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNwaW5hbENvcmUgPSByZXF1aXJlKFwic3BpbmFsLWNvcmUtY29ubmVjdG9yanNcIik7XG5jb25zdCBnbG9iYWxUeXBlID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHdpbmRvdztcbmltcG9ydCBab25lTm9kZSBmcm9tIFwiLi9ab25lTm9kZVwiXG5pbXBvcnQgRm9yZXN0IGZyb20gXCIuL0ZvcmVzdFwiXG5pbXBvcnQgWm9uZSBmcm9tIFwiLi9ab25lXCJcbmltcG9ydCBSZWxab25lQWdncmVnYXRlcyBmcm9tIFwiLi9SZWxab25lQWdncmVnYXRlc1wiXG5sZXQgZ2V0Vmlld2VyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnbG9iYWxUeXBlLnY7XG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBab25lRm9yZXN0IGV4dGVuZHMgRm9yZXN0IHtcbiAgY29uc3RydWN0b3IoX29wdGlvbnMpIHtcbiAgICBzdXBlcihfb3B0aW9ucyk7XG4gICAgaWYgKEZpbGVTeXN0ZW0uX3NpZ19zZXJ2ZXIpIHtcbiAgICAgIHRoaXMuYWRkX2F0dHIoe1xuICAgICAgICBjb2xvcmluZ1R5cGU6IDAsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuXG4gIGFkZFRyZWUoX3R5cGUsIF9yZWxab25lQWdncmVnYXRlc0xpc3QsIF96b25lTGlzdCkge1xuICAgIGxldCB6b25lID0gbmV3IFpvbmUoX3R5cGUpXG4gICAgem9uZS5zZXROYW1lKF90eXBlICsgXCIgXCIgKyB0aGlzLmluY3JlbWVudENoaWxkTmFtZUlkKCkudG9TdHJpbmcoKSk7XG4gICAgX3pvbmVMaXN0LmFkZFpvbmUoem9uZSk7XG4gICAgdmFyIHRyZWUgPSBuZXcgWm9uZU5vZGUoMCwgem9uZSwgdGhpcy5yZWxPcHRpb25zKTtcbiAgICB0aGlzLmxpc3QucHVzaCh0cmVlKTtcbiAgICBpZiAoIV9yZWxab25lQWdncmVnYXRlc0xpc3QuY29udGFpbnNCeVJlbGF0aW5nSWQoMCkpXG4gICAgICBfcmVsWm9uZUFnZ3JlZ2F0ZXNMaXN0LmFkZFJlbFpvbmVBZ2dyZWdhdGVzKDAsIFt6b25lXSlcbiAgICBlbHNlIHtcbiAgICAgIGxldCByZWwgPSBfcmVsWm9uZUFnZ3JlZ2F0ZXNMaXN0LmdldEJ5UmVsYXRpbmdJZCgwKVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmVsLmFkZFJlbGF0ZWRPYmplY3RzKHpvbmUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAnYWRkaW5nIHJlbCB0byBfcmVsWm9uZUFnZ3JlZ2F0ZXNMaXN0ICcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICBhZGRUcmVlRnJvbVJlbGF0aW9uKF96b25lKSB7XG4gICAgdmFyIHRyZWUgPSBuZXcgWm9uZU5vZGUoMCwgX3pvbmUsIHRoaXMucmVsT3B0aW9ucyk7XG4gICAgdGhpcy5saXN0LnB1c2godHJlZSk7XG4gIH1cblxuICBnZXRTcGluYWxOb2RlQnlab25lSWQoX2lkKSB7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubGlzdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IHNwaW5hbE5vZGUgPSB0aGlzLmxpc3RbaW5kZXhdO1xuICAgICAgbGV0IHJlcyA9IHNwaW5hbE5vZGUuZ2V0U3BpbmFsTm9kZUJ5Wm9uZUlkKF9pZCk7XG4gICAgICBpZiAocmVzICE9IG51bGwpXG4gICAgICAgIHJldHVybiBzcGluYWxOb2RlO1xuICAgIH1cbiAgfVxuXG4gIGdldEVxdWlwZW1lbnRzKCkge1xuICAgIGxldCBlcXVpcGVtZW50c0FycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHRyZWUgPSB0aGlzLmxpc3RbaV0uZWxlbWVudDtcbiAgICAgIGVxdWlwZW1lbnRzQXJyYXkgPSBlcXVpcGVtZW50c0FycmF5LmNvbmNhdCh0cmVlLmdldEVxdWlwZW1lbnRzKCkpO1xuICAgIH1cbiAgICByZXR1cm4gZXF1aXBlbWVudHNBcnJheTtcbiAgfVxuXG4gIGFzeW5jIGdldEFsbEJJTUdyb3VwcygpIHtcbiAgICBsZXQgcmVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHRyZWUgPSB0aGlzLmxpc3RbaV07XG4gICAgICBsZXQgdG1wID0gYXdhaXQgdHJlZS5nZXRBbGxCSU1Hcm91cHMoKVxuICAgICAgLy8gaWYgKHRtcCAhPSBudWxsKVxuICAgICAgcmVzID0gcmVzLmNvbmNhdCh0bXApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgYXN5bmMgZ2V0QWxsQklNT2JqZWN0c0lkcygpIHtcbiAgICBsZXQgcmVzID0gW11cbiAgICBsZXQgQklNR3JvdXBzID0gYXdhaXQgdGhpcy5nZXRBbGxCSU1Hcm91cHMoKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgQklNR3JvdXBzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgZWxlbWVudCA9IEJJTUdyb3Vwc1tpbmRleF07XG4gICAgICByZXMgPSByZXMuY29uY2F0KGVsZW1lbnQuYXJyYXlPZklkKCkpXG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICByZXN0b3JlQ29sb3JNYXRlcmlhbCgpIHtcbiAgICBpZiAodGhpcy5jb2xvcmluZ1R5cGUgPT09IDEpIGdldFZpZXdlcigpLmNsZWFyVGhlbWluZ0NvbG9ycygpXG4gICAgZWxzZSB7XG4gICAgICBnZXRWaWV3ZXIoKS5yZXN0b3JlQ29sb3JNYXRlcmlhbCh0aGlzLmdldEFsbEJJTU9iamVjdHNJZHMoKSlcbiAgICB9XG4gIH1cblxuICBhc3luYyByZWZyZXNoQWxsQ29sb3JzKCkge1xuICAgIGxldCBCSU1Hcm91cHMgPSBhd2FpdCB0aGlzLmdldEFsbEJJTUdyb3VwcygpO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBCSU1Hcm91cHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gQklNR3JvdXBzW2luZGV4XTtcbiAgICAgIGlmIChlbGVtZW50LmN1cnJlbnRWYWx1ZS5nZXQoKSAhPT0gMCAmJiBlbGVtZW50LmRpc3BsYXkuZ2V0KCkpIHtcbiAgICAgICAgZWxlbWVudC5yZWZyZXNoQ29sb3JzKHRoaXMuY29sb3JpbmdUeXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyBhY3RpdmF0ZUFsbEJJTUdyb3VwcygpIHtcbiAgICBsZXQgdCA9IGF3YWl0IHRoaXMuZ2V0QWxsQklNR3JvdXBzKClcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0W2luZGV4XTtcbiAgICAgIGVsZW1lbnQuYWN0aXZlLnNldCh0cnVlKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBkaXNhY3RpdmF0ZUFsbEJJTUdyb3VwcygpIHtcbiAgICBsZXQgdCA9IGF3YWl0IHRoaXMuZ2V0QWxsQklNR3JvdXBzKClcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0W2luZGV4XTtcbiAgICAgIGVsZW1lbnQuYWN0aXZlLnNldChmYWxzZSk7XG4gICAgfVxuICB9XG5cbn1cblxuc3BpbmFsQ29yZS5yZWdpc3Rlcl9tb2RlbHMoW1pvbmVGb3Jlc3RdKSJdfQ==