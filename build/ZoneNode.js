"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _SpinalNode = require("./SpinalNode");

var _SpinalNode2 = _interopRequireDefault(_SpinalNode);

var _Zone = require("./Zone");

var _Zone2 = _interopRequireDefault(_Zone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;

let getViewer = function () {
  return globalType.v;
};

class ZoneNode extends _SpinalNode2.default {
  constructor(_parent, _element, _options) {
    super(_parent, _element, _options);
  }

  incrementEquipementNameId() {
    globalType.operationCenter.options.equipementNameId.set(globalType.operationCenter.options.equipementNameId.get() + 1);
    return globalType.operationCenter.options.equipementNameId.get();
  }

  createChild(_type, _relZoneAggregatesList, _zoneList) {
    let zone = new _Zone2.default(_type);
    if (_type === "Zone") zone.setName(this.element.name.get() + "-" + this.incrementChildNameId().toString());
    if (_type === "Equipement") zone.setName(" Equipement-" + this.incrementEquipementNameId().toString());
    _zoneList.addZone(zone);
    let tree = new ZoneNode(this, zone);
    this.addChild(tree);
    if (!_relZoneAggregatesList.containsByRelatingId(this.element.id.get())) _relZoneAggregatesList.addRelZoneAggregates(this.element, [zone]);else {
      let rel = _relZoneAggregatesList.getByRelatingId(this.element.id.get());
      try {
        rel.addRelatedObjects(zone);
      } catch (error) {
        console.error(e);
      }
    }
  }

  addTreeFromRelation(_zone) {
    var tree = new ZoneNode(this, _zone);
    this.addChild(tree);
  }

  getSpinalNodeByZoneId(_id) {
    if (this.element.id.get() == _id) return this;else {
      for (let index = 0; index < this.children.length; index++) {
        const spinalNode = this.children[index];
        let res = spinalNode.getSpinalNodeByZoneId(_id);
        if (res != null) return spinalNode;
      }
    }
  }

  getEquipements() {
    let equipementsArray = [];
    for (let i = 0; i < this.children.length; i++) {
      const equip = this.children[i].element;
      const node = this.children[i];
      // console.log("recur", equip.type.get());
      // console.log(equipementsArray);
      // console.log(equip.isEquipement());
      if (equip.isEquipement()) equipementsArray = equipementsArray.concat(equip.element);else equipementsArray = equipementsArray.concat(node.getEquipements());
    }
    return equipementsArray;
  }

  getAllBIMGroups() {
    let res = [];
    res.push(this.element.BIMGroup);
    for (let i = 0; i < this.children.length; i++) {
      const child = this.children[i];
      res = res.concat(child.getAllBIMGroups());
    }
    return res;
  }

  getItems() {
    let t = [];
    t = t.concat(this.element.BIMGroup.arrayOfId());
    for (let i = 0; i < this.children.length; i++) {
      const element = this.children[i];
      let childItems = element.getItems();
      for (let i = 0; i < childItems.length; i++) {
        const element = childItems[i];
        if (t.indexOf(element) === -1) t.push(element);
      }
    }
    return t;
  }

  setAllDisplays(_bool) {
    let t = this.getAllBIMGroups();
    for (let index = 0; index < t.length; index++) {
      const element = t[index];
      element.display.set(_bool);
    }
  }

  setAllDatasActive(_bool) {
    let t = this.getAllBIMGroups();
    for (let index = 0; index < t.length; index++) {
      const element = t[index];
      element.active.set(_bool);
    }
  }

  updateShowContent(bool) {
    if (typeof bool != "undefined") {
      this.showContent.set(bool);
      return;
    }
    if (this.children.length === 0 && this.element.BIMGroup.BIMObjects.length === 0) this.showContent.set(false);
  }

}

exports.default = ZoneNode;
spinalCore.register_models([ZoneNode]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ab25lTm9kZS5qcyJdLCJuYW1lcyI6WyJzcGluYWxDb3JlIiwicmVxdWlyZSIsImdsb2JhbFR5cGUiLCJ3aW5kb3ciLCJnbG9iYWwiLCJnZXRWaWV3ZXIiLCJ2IiwiWm9uZU5vZGUiLCJTcGluYWxOb2RlIiwiY29uc3RydWN0b3IiLCJfcGFyZW50IiwiX2VsZW1lbnQiLCJfb3B0aW9ucyIsImluY3JlbWVudEVxdWlwZW1lbnROYW1lSWQiLCJvcGVyYXRpb25DZW50ZXIiLCJvcHRpb25zIiwiZXF1aXBlbWVudE5hbWVJZCIsInNldCIsImdldCIsImNyZWF0ZUNoaWxkIiwiX3R5cGUiLCJfcmVsWm9uZUFnZ3JlZ2F0ZXNMaXN0IiwiX3pvbmVMaXN0Iiwiem9uZSIsIlpvbmUiLCJzZXROYW1lIiwiZWxlbWVudCIsIm5hbWUiLCJpbmNyZW1lbnRDaGlsZE5hbWVJZCIsInRvU3RyaW5nIiwiYWRkWm9uZSIsInRyZWUiLCJhZGRDaGlsZCIsImNvbnRhaW5zQnlSZWxhdGluZ0lkIiwiaWQiLCJhZGRSZWxab25lQWdncmVnYXRlcyIsInJlbCIsImdldEJ5UmVsYXRpbmdJZCIsImFkZFJlbGF0ZWRPYmplY3RzIiwiZXJyb3IiLCJjb25zb2xlIiwiZSIsImFkZFRyZWVGcm9tUmVsYXRpb24iLCJfem9uZSIsImdldFNwaW5hbE5vZGVCeVpvbmVJZCIsIl9pZCIsImluZGV4IiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJzcGluYWxOb2RlIiwicmVzIiwiZ2V0RXF1aXBlbWVudHMiLCJlcXVpcGVtZW50c0FycmF5IiwiaSIsImVxdWlwIiwibm9kZSIsImlzRXF1aXBlbWVudCIsImNvbmNhdCIsImdldEFsbEJJTUdyb3VwcyIsInB1c2giLCJCSU1Hcm91cCIsImNoaWxkIiwiZ2V0SXRlbXMiLCJ0IiwiYXJyYXlPZklkIiwiY2hpbGRJdGVtcyIsImluZGV4T2YiLCJzZXRBbGxEaXNwbGF5cyIsIl9ib29sIiwiZGlzcGxheSIsInNldEFsbERhdGFzQWN0aXZlIiwiYWN0aXZlIiwidXBkYXRlU2hvd0NvbnRlbnQiLCJib29sIiwic2hvd0NvbnRlbnQiLCJCSU1PYmplY3RzIiwicmVnaXN0ZXJfbW9kZWxzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7QUFIQSxNQUFNQSxhQUFhQyxRQUFRLHlCQUFSLENBQW5CO0FBQ0EsTUFBTUMsYUFBYSxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQyxNQUFoQyxHQUF5Q0QsTUFBNUQ7O0FBR0EsSUFBSUUsWUFBWSxZQUFXO0FBQ3pCLFNBQU9ILFdBQVdJLENBQWxCO0FBQ0QsQ0FGRDs7QUFJZSxNQUFNQyxRQUFOLFNBQXVCQyxvQkFBdkIsQ0FBa0M7QUFDL0NDLGNBQVlDLE9BQVosRUFBcUJDLFFBQXJCLEVBQStCQyxRQUEvQixFQUF5QztBQUN2QyxVQUFNRixPQUFOLEVBQWVDLFFBQWYsRUFBeUJDLFFBQXpCO0FBQ0Q7O0FBRURDLDhCQUE0QjtBQUMxQlgsZUFBV1ksZUFBWCxDQUEyQkMsT0FBM0IsQ0FBbUNDLGdCQUFuQyxDQUNHQyxHQURILENBQ09mLFdBQVdZLGVBQVgsQ0FBMkJDLE9BQTNCLENBQW1DQyxnQkFBbkMsQ0FBb0RFLEdBQXBELEtBQTRELENBRG5FO0FBRUEsV0FBT2hCLFdBQVdZLGVBQVgsQ0FBMkJDLE9BQTNCLENBQW1DQyxnQkFBbkMsQ0FBb0RFLEdBQXBELEVBQVA7QUFDRDs7QUFFREMsY0FBWUMsS0FBWixFQUFtQkMsc0JBQW5CLEVBQTJDQyxTQUEzQyxFQUFzRDtBQUNwRCxRQUFJQyxPQUFPLElBQUlDLGNBQUosQ0FBU0osS0FBVCxDQUFYO0FBQ0EsUUFBSUEsVUFBVSxNQUFkLEVBQ0VHLEtBQUtFLE9BQUwsQ0FDRSxLQUFLQyxPQUFMLENBQWFDLElBQWIsQ0FBa0JULEdBQWxCLEtBQTBCLEdBQTFCLEdBQWdDLEtBQUtVLG9CQUFMLEdBQTRCQyxRQUE1QixFQURsQztBQUdGLFFBQUlULFVBQVUsWUFBZCxFQUNFRyxLQUFLRSxPQUFMLENBQWEsaUJBQWlCLEtBQUtaLHlCQUFMLEdB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RCxRQUFJLEtBQUsxQixRQUFMLENBQWNDLE1BQWQsS0FBeUIsQ0FBekIsSUFBOEIsS0FBS3RCLE9BQUwsQ0FBYWtDLFFBQWIsQ0FBc0JlLFVBQXRCLENBQWlDM0IsTUFBakMsS0FDaEMsQ0FERixFQUVFLEtBQUswQixXQUFMLENBQWlCekQsR0FBakIsQ0FBcUIsS0FBckI7QUFDSDs7QUF0SDhDOztrQkFBNUJWLFE7QUEySHJCUCxXQUFXNEUsZUFBWCxDQUEyQixDQUFDckUsUUFBRCxDQUEzQiIsImZpbGUiOiJab25lTm9kZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNwaW5hbENvcmUgPSByZXF1aXJlKFwic3BpbmFsLWNvcmUtY29ubmVjdG9yanNcIik7XG5jb25zdCBnbG9iYWxUeXBlID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHdpbmRvdztcbmltcG9ydCBTcGluYWxOb2RlIGZyb20gXCIuL1NwaW5hbE5vZGVcIlxuaW1wb3J0IFpvbmUgZnJvbSBcIi4vWm9uZVwiO1xubGV0IGdldFZpZXdlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsVHlwZS52O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWm9uZU5vZGUgZXh0ZW5kcyBTcGluYWxOb2RlIHtcbiAgY29uc3RydWN0b3IoX3BhcmVudCwgX2VsZW1lbnQsIF9vcHRpb25zKSB7XG4gICAgc3VwZXIoX3BhcmVudCwgX2VsZW1lbnQsIF9vcHRpb25zKTtcbiAgfVxuXG4gIGluY3JlbWVudEVxdWlwZW1lbnROYW1lSWQoKSB7XG4gICAgZ2xvYmFsVHlwZS5vcGVyYXRpb25DZW50ZXIub3B0aW9ucy5lcXVpcGVtZW50TmFtZUlkXG4gICAgICAuc2V0KGdsb2JhbFR5cGUub3BlcmF0aW9uQ2VudGVyLm9wdGlvbnMuZXF1aXBlbWVudE5hbWVJZC5nZXQoKSArIDEpO1xuICAgIHJldHVybiBnbG9iYWxUeXBlLm9wZXJhdGlvbkNlbnRlci5vcHRpb25zLmVxdWlwZW1lbnROYW1lSWQuZ2V0KCk7XG4gIH1cblxuICBjcmVhdGVDaGlsZChfdHlwZSwgX3JlbFpvbmVBZ2dyZWdhdGVzTGlzdCwgX3pvbmVMaXN0KSB7XG4gICAgbGV0IHpvbmUgPSBuZXcgWm9uZShfdHlwZSlcbiAgICBpZiAoX3R5cGUgPT09IFwiWm9uZVwiKVxuICAgICAgem9uZS5zZXROYW1lKFxuICAgICAgICB0aGlzLmVsZW1lbnQubmFtZS5nZXQoKSArIFwiLVwiICsgdGhpcy5pbmNyZW1lbnRDaGlsZE5hbWVJZCgpLnRvU3RyaW5nKClcbiAgICAgIClcbiAgICBpZiAoX3R5cGUgPT09IFwiRXF1aXBlbWVudFwiKVxuICAgICAgem9uZS5zZXROYW1lKFwiIEVxdWlwZW1lbnQtXCIgKyB0aGlzLmluY3JlbWVudEVxdWlwZW1lbnROYW1lSWQoKS50b1N0cmluZygpKVxuICAgIF96b25lTGlzdC5hZGRab25lKHpvbmUpO1xuICAgIGxldCB0cmVlID0gbmV3IFpvbmVOb2RlKHRoaXMsIHpvbmUpO1xuICAgIHRoaXMuYWRkQ2hpbGQodHJlZSk7XG4gICAgaWYgKCFfcmVsWm9uZUFnZ3JlZ2F0ZXNMaXN0LmNvbnRhaW5zQnlSZWxhdGluZ0lkKHRoaXMuZWxlbWVudC5pZC5nZXQoKSkpXG4gICAgICBfcmVsWm9uZUFnZ3JlZ2F0ZXNMaXN0LmFkZFJlbFpvbmVBZ2dyZWdhdGVzKHRoaXMuZWxlbWVudCwgW3pvbmVdKVxuICAgIGVsc2Uge1xuICAgICAgbGV0IHJlbCA9IF9yZWxab25lQWdncmVnYXRlc0xpc3QuZ2V0QnlSZWxhdGluZ0lkKHRoaXMuZWxlbWVudC5pZC5nZXQoKSlcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlbC5hZGRSZWxhdGVkT2JqZWN0cyh6b25lKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhZGRUcmVlRnJvbVJlbGF0aW9uKF96b25lKSB7XG4gICAgdmFyIHRyZWUgPSBuZXcgWm9uZU5vZGUodGhpcywgX3pvbmUpO1xuICAgIHRoaXMuYWRkQ2hpbGQodHJlZSk7XG4gIH1cblxuICBnZXRTcGluYWxOb2RlQnlab25lSWQoX2lkKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudC5pZC5nZXQoKSA9PSBfaWQpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIGVsc2Uge1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvbnN0IHNwaW5hbE5vZGUgPSB0aGlzLmNoaWxkcmVuW2luZGV4XTtcbiAgICAgICAgbGV0IHJlcyA9IHNwaW5hbE5vZGUuZ2V0U3BpbmFsTm9kZUJ5Wm9uZUlkKF9pZCk7XG4gICAgICAgIGlmIChyZXMgIT0gbnVsbClcbiAgICAgICAgICByZXR1cm4gc3BpbmFsTm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRFcXVpcGVtZW50cygpIHtcbiAgICBsZXQgZXF1aXBlbWVudHNBcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZXF1aXAgPSB0aGlzLmNoaWxkcmVuW2ldLmVsZW1lbnQ7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwicmVjdXJcIiwgZXF1aXAudHlwZS5nZXQoKSk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhlcXVpcGVtZW50c0FycmF5KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGVxdWlwLmlzRXF1aXBlbWVudCgpKTtcbiAgICAgIGlmIChlcXVpcC5pc0VxdWlwZW1lbnQoKSlcbiAgICAgICAgZXF1aXBlbWVudHNBcnJheSA9IGVxdWlwZW1lbnRzQXJyYXkuY29uY2F0KGVxdWlwLmVsZW1lbnQpO1xuICAgICAgZWxzZSBlcXVpcGVtZW50c0FycmF5ID0gZXF1aXBlbWVudHNBcnJheS5jb25jYXQobm9kZS5nZXRFcXVpcGVtZW50cygpKTtcbiAgICB9XG4gICAgcmV0dXJuIGVxdWlwZW1lbnRzQXJyYXk7XG4gIH1cblxuICBnZXRBbGxCSU1Hcm91cHMoKSB7XG4gICAgbGV0IHJlcyA9IFtdO1xuICAgIHJlcy5wdXNoKHRoaXMuZWxlbWVudC5CSU1Hcm91cCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgICByZXMgPSByZXMuY29uY2F0KGNoaWxkLmdldEFsbEJJTUdyb3VwcygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG5cblxuXG4gIGdldEl0ZW1zKCkge1xuICAgIGxldCB0ID0gW107XG4gICAgdCA9IHQuY29uY2F0KHRoaXMuZWxlbWVudC5CSU1Hcm91cC5hcnJheU9mSWQoKSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgIGxldCBjaGlsZEl0ZW1zID0gZWxlbWVudC5nZXRJdGVtcygpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBjaGlsZEl0ZW1zW2ldO1xuICAgICAgICBpZiAodC5pbmRleE9mKGVsZW1lbnQpID09PSAtMSkgdC5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdDtcbiAgfVxuXG4gIHNldEFsbERpc3BsYXlzKF9ib29sKSB7XG4gICAgbGV0IHQgPSB0aGlzLmdldEFsbEJJTUdyb3VwcygpO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgZWxlbWVudCA9IHRbaW5kZXhdO1xuICAgICAgZWxlbWVudC5kaXNwbGF5LnNldChfYm9vbCk7XG4gICAgfVxuICB9XG5cbiAgc2V0QWxsRGF0YXNBY3RpdmUoX2Jvb2wpIHtcbiAgICBsZXQgdCA9IHRoaXMuZ2V0QWxsQklNR3JvdXBzKCk7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gdFtpbmRleF07XG4gICAgICBlbGVtZW50LmFjdGl2ZS5zZXQoX2Jvb2wpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVNob3dDb250ZW50KGJvb2wpIHtcbiAgICBpZiAodHlwZW9mIGJvb2wgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhpcy5zaG93Q29udGVudC5zZXQoYm9vbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmVsZW1lbnQuQklNR3JvdXAuQklNT2JqZWN0cy5sZW5ndGggPT09XG4gICAgICAwKVxuICAgICAgdGhpcy5zaG93Q29udGVudC5zZXQoZmFsc2UpO1xuICB9XG5cblxufVxuXG5zcGluYWxDb3JlLnJlZ2lzdGVyX21vZGVscyhbWm9uZU5vZGVdKTsiXX0=