"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _OperationCenterObject = require("./OperationCenterObject");

var _OperationCenterObject2 = _interopRequireDefault(_OperationCenterObject);

var _SpinalNode = require("./SpinalNode");

var _SpinalNode2 = _interopRequireDefault(_SpinalNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;
let getViewer = function () {
  return globalType.v;
};
class Forest extends globalType.Model {
  constructor(_options) {
    if (typeof _options === "undefined") _options = new globalType.Ptr(0);
    super();
    if (FileSystem._sig_server) {
      this.add_attr({
        list: new Lst(),
        childNameId: 0,
        relOptions: _options
      });
    }
  }
  setOptions(_options) {
    this.relOptions.set(_options);
  }

  incrementChildNameId() {
    this.childNameId.set(this.childNameId.get() + 1);
    return this.childNameId.get();
  }

  addTree(_name) {
    let operationCenterObject = new _OperationCenterObject2.default();
    operationCenterObject.setName(_name + " " + this.incrementChildNameId().toString());
    var tree = new _SpinalNode2.default(0, operationCenterObject, this.relOptions);
    this.list.push(tree);
  }

  removeTree(root) {
    let i = this.list.indexOf(root);
    if (i >= 0) {
      this.list.splice(i, 1);
      delete FileSystem._objects[root._server_id];
    }
    return i;
  }

}

exports.default = Forest;
spinalCore.register_models([Forest]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Gb3Jlc3QuanMiXSwibmFtZXMiOlsic3BpbmFsQ29yZSIsInJlcXVpcmUiLCJnbG9iYWxUeXBlIiwid2luZG93IiwiZ2xvYmFsIiwiZ2V0Vmlld2VyIiwidiIsIkZvcmVzdCIsIk1vZGVsIiwiY29uc3RydWN0b3IiLCJfb3B0aW9ucyIsIlB0ciIsIkZpbGVTeXN0ZW0iLCJfc2lnX3NlcnZlciIsImFkZF9hdHRyIiwibGlzdCIsIkxzdCIsImNoaWxkTmFtZUlkIiwicmVsT3B0aW9ucyIsInNldE9wdGlvbnMiLCJzZXQiLCJpbmNyZW1lbnRDaGlsZE5hbWVJZCIsImdldCIsImFkZFRyZWUiLCJfbmFtZSIsIm9wZXJhdGlvbkNlbnRlck9iamVjdCIsIk9wZXJhdGlvbkNlbnRlck9iamVjdCIsInNldE5hbWUiLCJ0b1N0cmluZyIsInRyZWUiLCJTcGluYWxOb2RlIiwicHVzaCIsInJlbW92ZVRyZWUiLCJyb290IiwiaSIsImluZGV4T2YiLCJzcGxpY2UiLCJfb2JqZWN0cyIsIl9zZXJ2ZXJfaWQiLCJyZWdpc3Rlcl9tb2RlbHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLGFBQWFDLFFBQVEseUJBQVIsQ0FBbkI7QUFDQSxNQUFNQyxhQUFhLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NDLE1BQWhDLEdBQXlDRCxNQUE1RDtBQUNBLElBQUlFLFlBQVksWUFBVztBQUN6QixTQUFPSCxXQUFXSSxDQUFsQjtBQUNELENBRkQ7QUFHZSxNQUFNQyxNQUFOLFNBQXFCTCxXQUFXTSxLQUFoQyxDQUFzQztBQUNuREMsY0FBWUMsUUFBWixFQUFzQjtBQUNwQixRQUFJLE9BQU9BLFFBQVAsS0FBb0IsV0FBeEIsRUFBcUNBLFdBQVcsSUFBSVIsV0FBV1MsR0FBZixDQUFtQixDQUFuQixDQUFYO0FBQ3JDO0FBQ0EsUUFBSUMsV0FBV0MsV0FBZixFQUE0QjtBQUMxQixXQUFLQyxRQUFMLENBQWM7QUFDWkMsY0FBTSxJQUFJQyxHQUFKLEVBRE07QUFFWkMscUJBQWEsQ0FGRDtBQUdaQyxvQkFBWVI7QUFIQSxPQUFkO0FBS0Q7QUFDRjtBQUNEUyxhQUFXVCxRQUFYLEVBQXFCO0FBQ25CLFNBQUtRLFVBQUwsQ0FBZ0JFLEdBQWhCLENBQW9CVixRQUFwQjtBQUNEOztBQUVEVyx5QkFBdUI7QUFDckIsU0FBS0osV0FBTCxDQUFpQkcsR0FBakIsQ0FBcUIsS0FBS0gsV0FBTCxDQUFpQkssR0FBakIsS0FBeUIsQ0FBOUM7QUFDQSxXQUFPLEtBQUtMLFdBQUwsQ0FBaUJLLEdBQWpCLEVBQVA7QUFDRDs7QUFFREMsVUFBUUMsS0FBUixFQUFlO0FBQ2IsUUFBSUMsd0JBQXdCLElBQUlDLCtCQUFKLEVBQTVCO0FBQ0FELDBCQUFzQkUsT0FBdEIsQ0FBOEJILFFBQVEsR0FBUixHQUFjLEtBQUtILG9CQUFMLEdBQ3pDTyxRQUR5QyxFQUE1QztBQUVBLFFBQUlDLE9BQU8sSUFBSUMsb0JBQUosQ0FBZSxDQUFmLEVBQWtCTCxxQkFBbEIsRUFBeUMsS0FBS1AsVUFBOUMsQ0FBWDtBQUNBLFNBQUtILElBQUwsQ0FBVWdCLElBQVYsQ0FBZUYsSUFBZjtBQUNEOztBQUlERyxhQUFXQyxJQUFYLEVBQWlCO0FBQ2YsUUFBSUMsSUFBSSxLQUFLbkIsSUFBTCxDQUFVb0IsT0FBVixDQUFrQkYsSUFBbEIsQ0FBUjtBQUNBLFFBQUlDLEtBQUssQ0FBVCxFQUFZO0FBQ1YsV0FBS25CLElBQUwsQ0FBVXFCLE1BQVYsQ0FBaUJGLENBQWpCLEVBQW9CLENBQXBCO0FBQ0EsYUFBT3RCLFdBQVd5QixRQUFYLENBQW9CSixLQUFLSyxVQUF6QixDQUFQO0FBQ0Q7QUFDRCxXQUFPSixDQUFQO0FBQ0Q7O0FBdENrRDs7a0JBQWhDM0IsTTtBQTBDckJQLFdBQVd1QyxlQUFYLENBQTJCLENBQUNoQyxNQUFELENBQTNCIiwiZmlsZSI6IkZvcmVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPcGVyYXRpb25DZW50ZXJPYmplY3QgZnJvbSBcIi4vT3BlcmF0aW9uQ2VudGVyT2JqZWN0XCI7XG5pbXBvcnQgU3BpbmFsTm9kZSBmcm9tIFwiLi9TcGluYWxOb2RlXCI7XG5cbmNvbnN0IHNwaW5hbENvcmUgPSByZXF1aXJlKFwic3BpbmFsLWNvcmUtY29ubmVjdG9yanNcIik7XG5jb25zdCBnbG9iYWxUeXBlID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHdpbmRvdztcbmxldCBnZXRWaWV3ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdsb2JhbFR5cGUudjtcbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcmVzdCBleHRlbmRzIGdsb2JhbFR5cGUuTW9kZWwge1xuICBjb25zdHJ1Y3Rvcihfb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgX29wdGlvbnMgPT09IFwidW5kZWZpbmVkXCIpIF9vcHRpb25zID0gbmV3IGdsb2JhbFR5cGUuUHRyKDApXG4gICAgc3VwZXIoKTtcbiAgICBpZiAoRmlsZVN5c3RlbS5fc2lnX3NlcnZlcikge1xuICAgICAgdGhpcy5hZGRfYXR0cih7XG4gICAgICAgIGxpc3Q6IG5ldyBMc3QoKSxcbiAgICAgICAgY2hpbGROYW1lSWQ6IDAsXG4gICAgICAgIHJlbE9wdGlvbnM6IF9vcHRpb25zXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgc2V0T3B0aW9ucyhfb3B0aW9ucykge1xuICAgIHRoaXMucmVsT3B0aW9ucy5zZXQoX29wdGlvbnMpO1xuICB9XG5cbiAgaW5jcmVtZW50Q2hpbGROYW1lSWQoKSB7XG4gICAgdGhpcy5jaGlsZE5hbWVJZC5zZXQodGhpcy5jaGlsZE5hbWVJZC5nZXQoKSArIDEpO1xuICAgIHJldHVybiB0aGlzLmNoaWxkTmFtZUlkLmdldCgpO1xuICB9XG5cbiAgYWRkVHJlZShfbmFtZSkge1xuICAgIGxldCBvcGVyYXRpb25DZW50ZXJPYmplY3QgPSBuZXcgT3BlcmF0aW9uQ2VudGVyT2JqZWN0KClcbiAgICBvcGVyYXRpb25DZW50ZXJPYmplY3Quc2V0TmFtZShfbmFtZSArIFwiIFwiICsgdGhpcy5pbmNyZW1lbnRDaGlsZE5hbWVJZCgpXG4gICAgICAudG9TdHJpbmcoKSk7XG4gICAgdmFyIHRyZWUgPSBuZXcgU3BpbmFsTm9kZSgwLCBvcGVyYXRpb25DZW50ZXJPYmplY3QsIHRoaXMucmVsT3B0aW9ucyk7XG4gICAgdGhpcy5saXN0LnB1c2godHJlZSk7XG4gIH1cblxuXG5cbiAgcmVtb3ZlVHJlZShyb290KSB7XG4gICAgbGV0IGkgPSB0aGlzLmxpc3QuaW5kZXhPZihyb290KTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLmxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgZGVsZXRlIEZpbGVTeXN0ZW0uX29iamVjdHNbcm9vdC5fc2VydmVyX2lkXTtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH1cblxufVxuXG5zcGluYWxDb3JlLnJlZ2lzdGVyX21vZGVscyhbRm9yZXN0XSkiXX0=