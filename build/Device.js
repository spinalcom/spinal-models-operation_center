"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _OperationCenterObject = require("./OperationCenterObject");

var _OperationCenterObject2 = _interopRequireDefault(_OperationCenterObject);

var _Endpoint = require("./Endpoint");

var _Endpoint2 = _interopRequireDefault(_Endpoint);

var _EndpointGroup = require("./EndpointGroup");

var _EndpointGroup2 = _interopRequireDefault(_EndpointGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;
class Device extends _OperationCenterObject2.default {
  constructor(_protocolType, _id, name = "Device") {
    if (typeof _id === "undefined") super();else super(_id);
    if (FileSystem._sig_server) {
      let defaultEndpointGroup = new _EndpointGroup2.default(this);
      this.add_attr({
        protocolType: new Choice(0, ["SNMP", "BACnet"]),
        ipAddress: "127.0.0.1",
        deviceType: new Choice(0, ["Sensor", "Router", "Actuator"]),
        endpointGroupsPtrs: new Lst([new Ptr(defaultEndpointGroup)]),
        defaultMeasurement: new Choice(0, defaultEndpointGroup.list.get()),
        relatedEquipement: new Ptr(0)
      });
      this.protocolType.set(_protocolType || "SNMP");
      defaultEndpointGroup.createEndpoint();
    }
  }

  createEndpointGroup() {
    let endpointGroup = new _EndpointGroup2.default(this);
    this.addEndpointGroup(endpointGroup);
  }

  addEndpointGroup(_endpointGroup) {
    this.endpointGroupsPtrs.push(new Ptr(_endpointGroup));
  }

  createEndpoint() {
    let endpoint = new _Endpoint2.default();
    this.addEndpoint(endpoint);
  }

  addEndpoint(_endpoint) {
    if (this.endpointGroupsPtrs.length === 0) {
      let defaultEndpointGroup = new _EndpointGroup2.default(this);
      this.endpointGroupsPtrs.push(new Ptr(defaultEndpointGroup));
    }
    this.endpointGroupsPtrs[0].load(defaultEndpointGroup => {
      _endpoint.setGroup(defaultEndpointGroup);
      defaultEndpointGroup.addEndpoint(_endpoint);
    });
  }

}

exports.default = Device;
spinalCore.register_models([Device]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EZXZpY2UuanMiXSwibmFtZXMiOlsic3BpbmFsQ29yZSIsInJlcXVpcmUiLCJnbG9iYWxUeXBlIiwid2luZG93IiwiZ2xvYmFsIiwiRGV2aWNlIiwiT3BlcmF0aW9uQ2VudGVyT2JqZWN0IiwiY29uc3RydWN0b3IiLCJfcHJvdG9jb2xUeXBlIiwiX2lkIiwibmFtZSIsIkZpbGVTeXN0ZW0iLCJfc2lnX3NlcnZlciIsImRlZmF1bHRFbmRwb2ludEdyb3VwIiwiRW5kcG9pbnRHcm91cCIsImFkZF9hdHRyIiwicHJvdG9jb2xUeXBlIiwiQ2hvaWNlIiwiaXBBZGRyZXNzIiwiZGV2aWNlVHlwZSIsImVuZHBvaW50R3JvdXBzUHRycyIsIkxzdCIsIlB0ciIsImRlZmF1bHRNZWFzdXJlbWVudCIsImxpc3QiLCJnZXQiLCJyZWxhdGVkRXF1aXBlbWVudCIsInNldCIsImNyZWF0ZUVuZHBvaW50IiwiY3JlYXRlRW5kcG9pbnRHcm91cCIsImVuZHBvaW50R3JvdXAiLCJhZGRFbmRwb2ludEdyb3VwIiwiX2VuZHBvaW50R3JvdXAiLCJwdXNoIiwiZW5kcG9pbnQiLCJFbmRwb2ludCIsImFkZEVuZHBvaW50IiwiX2VuZHBvaW50IiwibGVuZ3RoIiwibG9hZCIsInNldEdyb3VwIiwicmVnaXN0ZXJfbW9kZWxzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUpBLE1BQU1BLGFBQWFDLFFBQVEseUJBQVIsQ0FBbkI7QUFDQSxNQUFNQyxhQUFhLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NDLE1BQWhDLEdBQXlDRCxNQUE1RDtBQUtlLE1BQU1FLE1BQU4sU0FBcUJDLCtCQUFyQixDQUEyQztBQUN4REMsY0FBWUMsYUFBWixFQUEyQkMsR0FBM0IsRUFBZ0NDLE9BQU8sUUFBdkMsRUFBaUQ7QUFDL0MsUUFBSSxPQUFPRCxHQUFQLEtBQWUsV0FBbkIsRUFDRSxRQURGLEtBR0UsTUFBTUEsR0FBTjtBQUNGLFFBQUlFLFdBQVdDLFdBQWYsRUFBNEI7QUFDMUIsVUFBSUMsdUJBQXVCLElBQUlDLHVCQUFKLENBQWtCLElBQWxCLENBQTNCO0FBQ0EsV0FBS0MsUUFBTCxDQUFjO0FBQ1pDLHNCQUFjLElBQUlDLE1BQUosQ0FBVyxDQUFYLEVBQWMsQ0FBQyxNQUFELEVBQVMsUUFBVCxDQUFkLENBREY7QUFFWkMsbUJBQVcsV0FGQztBQUdaQyxvQkFBWSxJQUFJRixNQUFKLENBQVcsQ0FBWCxFQUFjLENBQUMsUUFBRCxFQUFXLFFBQVgsRUFBcUIsVUFBckIsQ0FBZCxDQUhBO0FBSVpHLDRCQUFvQixJQUFJQyxHQUFKLENBQVEsQ0FBQyxJQUFJQyxHQUFKLENBQVFULG9CQUFSLENBQUQsQ0FBUixDQUpSO0FBS1pVLDRCQUFvQixJQUFJTixNQUFKLENBQVcsQ0FBWCxFQUFjSixxQkFBcUJXLElBQXJCLENBQTBCQyxHQUExQixFQUFkLENBTFI7QUFNWkMsMkJBQW1CLElBQUlKLEdBQUosQ0FBUSxDQUFSO0FBTlAsT0FBZDtBQVFBLFdBQUtOLFlBQUwsQ0FBa0JXLEdBQWxCLENBQXNCbkIsaUJBQWlCLE1BQXZDO0FBQ0FLLDJCQUFxQmUsY0FBckI7QUFDRDtBQUNGOztBQUVEQyx3QkFBc0I7QUFDcEIsUUFBSUMsZ0JBQWdCLElBQUloQix1QkFBSixDQUFrQixJQUFsQixDQUFwQjtBQUNBLFNBQUtpQixnQkFBTCxDQUFzQkQsYUFBdEI7QUFDRDs7QUFFREMsbUJBQWlCQyxjQUFqQixFQUFpQztBQUMvQixTQUFLWixrQkFBTCxDQUF3QmEsSUFBeEIsQ0FBNkIsSUFBSVgsR0FBSixDQUFRVSxjQUFSLENBQTdCO0FBQ0Q7O0FBRURKLG1CQUFpQjtBQUNmLFFBQUlNLFdBQVcsSUFBSUMsa0JBQUosRUFBZjtBQUNBLFNBQUtDLFdBQUwsQ0FBaUJGLFFBQWpCO0FBQ0Q7O0FBRURFLGNBQVlDLFNBQVosRUFBdUI7QUFDckIsUUFBSSxLQUFLakIsa0JBQUwsQ0FBd0JrQixNQUF4QixLQUFtQyxDQUF2QyxFQUEwQztBQUN4QyxVQUFJekIsdUJBQXVCLElBQUlDLHVCQUFKLENBQWtCLElBQWxCLENBQTNCO0FBQ0EsV0FBS00sa0JBQUwsQ0FBd0JhLElBQXhCLENBQTZCLElBQUlYLEdBQUosQ0FBUVQsb0JBQVIsQ0FBN0I7QUFDRDtBQUNELFNBQUtPLGtCQUFMLENBQXdCLENBQXhCLEVBQTJCbUIsSUFBM0IsQ0FBZ0MxQix3QkFBd0I7QUFDdER3QixnQkFBVUcsUUFBVixDQUFtQjNCLG9CQUFuQjtBQUNBQSwyQkFBcUJ1QixXQUFyQixDQUFpQ0MsU0FBakM7QUFDRCxLQUhEO0FBSUQ7O0FBNUN1RDs7a0JBQXJDaEMsTTtBQWdEckJMLFdBQVd5QyxlQUFYLENBQTJCLENBQUNwQyxNQUFELENBQTNCIiwiZmlsZSI6IkRldmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNwaW5hbENvcmUgPSByZXF1aXJlKFwic3BpbmFsLWNvcmUtY29ubmVjdG9yanNcIik7XG5jb25zdCBnbG9iYWxUeXBlID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHdpbmRvdztcbmltcG9ydCBPcGVyYXRpb25DZW50ZXJPYmplY3QgZnJvbSBcIi4vT3BlcmF0aW9uQ2VudGVyT2JqZWN0XCJcbmltcG9ydCBFbmRwb2ludCBmcm9tIFwiLi9FbmRwb2ludFwiXG5pbXBvcnQgRW5kcG9pbnRHcm91cCBmcm9tIFwiLi9FbmRwb2ludEdyb3VwXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGV2aWNlIGV4dGVuZHMgT3BlcmF0aW9uQ2VudGVyT2JqZWN0IHtcbiAgY29uc3RydWN0b3IoX3Byb3RvY29sVHlwZSwgX2lkLCBuYW1lID0gXCJEZXZpY2VcIikge1xuICAgIGlmICh0eXBlb2YgX2lkID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgc3VwZXIoKTtcbiAgICBlbHNlXG4gICAgICBzdXBlcihfaWQpO1xuICAgIGlmIChGaWxlU3lzdGVtLl9zaWdfc2VydmVyKSB7XG4gICAgICBsZXQgZGVmYXVsdEVuZHBvaW50R3JvdXAgPSBuZXcgRW5kcG9pbnRHcm91cCh0aGlzKVxuICAgICAgdGhpcy5hZGRfYXR0cih7XG4gICAgICAgIHByb3RvY29sVHlwZTogbmV3IENob2ljZSgwLCBbXCJTTk1QXCIsIFwiQkFDbmV0XCJdKSxcbiAgICAgICAgaXBBZGRyZXNzOiBcIjEyNy4wLjAuMVwiLFxuICAgICAgICBkZXZpY2VUeXBlOiBuZXcgQ2hvaWNlKDAsIFtcIlNlbnNvclwiLCBcIlJvdXRlclwiLCBcIkFjdHVhdG9yXCJdKSxcbiAgICAgICAgZW5kcG9pbnRHcm91cHNQdHJzOiBuZXcgTHN0KFtuZXcgUHRyKGRlZmF1bHRFbmRwb2ludEdyb3VwKV0pLFxuICAgICAgICBkZWZhdWx0TWVhc3VyZW1lbnQ6IG5ldyBDaG9pY2UoMCwgZGVmYXVsdEVuZHBvaW50R3JvdXAubGlzdC5nZXQoKSksXG4gICAgICAgIHJlbGF0ZWRFcXVpcGVtZW50OiBuZXcgUHRyKDApXG4gICAgICB9KTtcbiAgICAgIHRoaXMucHJvdG9jb2xUeXBlLnNldChfcHJvdG9jb2xUeXBlIHx8IFwiU05NUFwiKTtcbiAgICAgIGRlZmF1bHRFbmRwb2ludEdyb3VwLmNyZWF0ZUVuZHBvaW50KClcbiAgICB9XG4gIH1cblxuICBjcmVhdGVFbmRwb2ludEdyb3VwKCkge1xuICAgIGxldCBlbmRwb2ludEdyb3VwID0gbmV3IEVuZHBvaW50R3JvdXAodGhpcylcbiAgICB0aGlzLmFkZEVuZHBvaW50R3JvdXAoZW5kcG9pbnRHcm91cCk7XG4gIH1cblxuICBhZGRFbmRwb2ludEdyb3VwKF9lbmRwb2ludEdyb3VwKSB7XG4gICAgdGhpcy5lbmRwb2ludEdyb3Vwc1B0cnMucHVzaChuZXcgUHRyKF9lbmRwb2ludEdyb3VwKSlcbiAgfVxuXG4gIGNyZWF0ZUVuZHBvaW50KCkge1xuICAgIGxldCBlbmRwb2ludCA9IG5ldyBFbmRwb2ludCgpXG4gICAgdGhpcy5hZGRFbmRwb2ludChlbmRwb2ludClcbiAgfVxuXG4gIGFkZEVuZHBvaW50KF9lbmRwb2ludCkge1xuICAgIGlmICh0aGlzLmVuZHBvaW50R3JvdXBzUHRycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGxldCBkZWZhdWx0RW5kcG9pbnRHcm91cCA9IG5ldyBFbmRwb2ludEdyb3VwKHRoaXMpXG4gICAgICB0aGlzLmVuZHBvaW50R3JvdXBzUHRycy5wdXNoKG5ldyBQdHIoZGVmYXVsdEVuZHBvaW50R3JvdXApKVxuICAgIH1cbiAgICB0aGlzLmVuZHBvaW50R3JvdXBzUHRyc1swXS5sb2FkKGRlZmF1bHRFbmRwb2ludEdyb3VwID0+IHtcbiAgICAgIF9lbmRwb2ludC5zZXRHcm91cChkZWZhdWx0RW5kcG9pbnRHcm91cCk7XG4gICAgICBkZWZhdWx0RW5kcG9pbnRHcm91cC5hZGRFbmRwb2ludChfZW5kcG9pbnQpXG4gICAgfSlcbiAgfVxuXG59XG5cbnNwaW5hbENvcmUucmVnaXN0ZXJfbW9kZWxzKFtEZXZpY2VdKSJdfQ==