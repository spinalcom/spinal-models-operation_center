"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _OperationCenterObject = require("./OperationCenterObject");

var _OperationCenterObject2 = _interopRequireDefault(_OperationCenterObject);

var _Endpoint = require("./Endpoint");

var _Endpoint2 = _interopRequireDefault(_Endpoint);

var _EndpointGroup = require("./EndpointGroup");

var _EndpointGroup2 = _interopRequireDefault(_EndpointGroup);

var _RelEquipementDevice = require("./RelEquipementDevice");

var _RelEquipementDevice2 = _interopRequireDefault(_RelEquipementDevice);

var _RelDeviceEquipement = require("./RelDeviceEquipement");

var _RelDeviceEquipement2 = _interopRequireDefault(_RelDeviceEquipement);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;
class Device extends _OperationCenterObject2.default {
  constructor(_protocolType, _id, name = "Device") {
    if (typeof _id === "undefined") super();else super(_id);
    if (FileSystem._sig_server) {
      let defaultEndpointGroup = new _EndpointGroup2.default(this);
      this.add_attr({
        protocolType: new Choice(0, ["SNMP", "BACnet"]),
        ipAddress: "127.0.0.1",
        deviceType: new Choice(0, ["Sensor", "Router", "Actuator"]),
        endpointGroupsPtrs: new Lst([new Ptr(defaultEndpointGroup)]),
        defaultMeasurement: new Choice(0, defaultEndpointGroup.list.get()),
        relEquipementDevice: new Ptr(new _RelEquipementDevice2.default(0, this)),
        relDeviceEquipement: new Ptr(new _RelDeviceEquipement2.default(0))
      });
      this.protocolType.set(_protocolType || "SNMP");
      defaultEndpointGroup.createEndpoint();
    }
  }

  createEndpointGroup() {
    let endpointGroup = new _EndpointGroup2.default(this);
    this.addEndpointGroup(endpointGroup);
  }

  addEndpointGroup(_endpointGroup) {
    this.endpointGroupsPtrs.push(new Ptr(_endpointGroup));
  }

  createEndpoint() {
    let endpoint = new _Endpoint2.default();
    this.addEndpoint(endpoint);
  }

  addEndpoint(_endpoint) {
    if (this.endpointGroupsPtrs.length === 0) {
      let defaultEndpointGroup = new _EndpointGroup2.default(this);
      this.endpointGroupsPtrs.push(new Ptr(defaultEndpointGroup));
    }
    this.endpointGroupsPtrs[0].load(defaultEndpointGroup => {
      _endpoint.setGroup(defaultEndpointGroup);
      defaultEndpointGroup.addEndpoint(_endpoint);
    });
  }

}

exports.default = Device;
spinalCore.register_models([Device]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EZXZpY2UuanMiXSwibmFtZXMiOlsic3BpbmFsQ29yZSIsInJlcXVpcmUiLCJnbG9iYWxUeXBlIiwid2luZG93IiwiZ2xvYmFsIiwiRGV2aWNlIiwiT3BlcmF0aW9uQ2VudGVyT2JqZWN0IiwiY29uc3RydWN0b3IiLCJfcHJvdG9jb2xUeXBlIiwiX2lkIiwibmFtZSIsIkZpbGVTeXN0ZW0iLCJfc2lnX3NlcnZlciIsImRlZmF1bHRFbmRwb2ludEdyb3VwIiwiRW5kcG9pbnRHcm91cCIsImFkZF9hdHRyIiwicHJvdG9jb2xUeXBlIiwiQ2hvaWNlIiwiaXBBZGRyZXNzIiwiZGV2aWNlVHlwZSIsImVuZHBvaW50R3JvdXBzUHRycyIsIkxzdCIsIlB0ciIsImRlZmF1bHRNZWFzdXJlbWVudCIsImxpc3QiLCJnZXQiLCJyZWxFcXVpcGVtZW50RGV2aWNlIiwiUmVsRXF1aXBlbWVudERldmljZSIsInJlbERldmljZUVxdWlwZW1lbnQiLCJSZWxEZXZpY2VFcXVpcGVtZW50Iiwic2V0IiwiY3JlYXRlRW5kcG9pbnQiLCJjcmVhdGVFbmRwb2ludEdyb3VwIiwiZW5kcG9pbnRHcm91cCIsImFkZEVuZHBvaW50R3JvdXAiLCJfZW5kcG9pbnRHcm91cCIsInB1c2giLCJlbmRwb2ludCIsIkVuZHBvaW50IiwiYWRkRW5kcG9pbnQiLCJfZW5kcG9pbnQiLCJsZW5ndGgiLCJsb2FkIiwic2V0R3JvdXAiLCJyZWdpc3Rlcl9tb2RlbHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7OztBQVBBLE1BQU1BLGFBQWFDLFFBQVEseUJBQVIsQ0FBbkI7QUFDQSxNQUFNQyxhQUFhLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NDLE1BQWhDLEdBQXlDRCxNQUE1RDtBQU9lLE1BQU1FLE1BQU4sU0FBcUJDLCtCQUFyQixDQUEyQztBQUN4REMsY0FBWUMsYUFBWixFQUEyQkMsR0FBM0IsRUFBZ0NDLE9BQU8sUUFBdkMsRUFBaUQ7QUFDL0MsUUFBSSxPQUFPRCxHQUFQLEtBQWUsV0FBbkIsRUFDRSxRQURGLEtBR0UsTUFBTUEsR0FBTjtBQUNGLFFBQUlFLFdBQVdDLFdBQWYsRUFBNEI7QUFDMUIsVUFBSUMsdUJBQXVCLElBQUlDLHVCQUFKLENBQWtCLElBQWxCLENBQTNCO0FBQ0EsV0FBS0MsUUFBTCxDQUFjO0FBQ1pDLHNCQUFjLElBQUlDLE1BQUosQ0FBVyxDQUFYLEVBQWMsQ0FBQyxNQUFELEVBQVMsUUFBVCxDQUFkLENBREY7QUFFWkMsbUJBQVcsV0FGQztBQUdaQyxvQkFBWSxJQUFJRixNQUFKLENBQVcsQ0FBWCxFQUFjLENBQUMsUUFBRCxFQUFXLFFBQVgsRUFBcUIsVUFBckIsQ0FBZCxDQUhBO0FBSVpHLDRCQUFvQixJQUFJQyxHQUFKLENBQVEsQ0FBQyxJQUFJQyxHQUFKLENBQVFULG9CQUFSLENBQUQsQ0FBUixDQUpSO0FBS1pVLDRCQUFvQixJQUFJTixNQUFKLENBQVcsQ0FBWCxFQUFjSixxQkFBcUJXLElBQXJCLENBQTBCQyxHQUExQixFQUFkLENBTFI7QUFNWkMsNkJBQXFCLElBQUlKLEdBQUosQ0FBUSxJQUFJSyw2QkFBSixDQUF3QixDQUF4QixFQUEyQixJQUEzQixDQUFSLENBTlQ7QUFPWkMsNkJBQXFCLElBQUlOLEdBQUosQ0FBUSxJQUFJTyw2QkFBSixDQUF3QixDQUF4QixDQUFSO0FBUFQsT0FBZDtBQVNBLFdBQUtiLFlBQUwsQ0FBa0JjLEdBQWxCLENBQXNCdEIsaUJBQWlCLE1BQXZDO0FBQ0FLLDJCQUFxQmtCLGNBQXJCO0FBQ0Q7QUFDRjs7QUFFREMsd0JBQXNCO0FBQ3BCLFFBQUlDLGdCQUFnQixJQUFJbkIsdUJBQUosQ0FBa0IsSUFBbEIsQ0FBcEI7QUFDQSxTQUFLb0IsZ0JBQUwsQ0FBc0JELGFBQXRCO0FBQ0Q7O0FBRURDLG1CQUFpQkMsY0FBakIsRUFBaUM7QUFDL0IsU0FBS2Ysa0JBQUwsQ0FBd0JnQixJQUF4QixDQUE2QixJQUFJZCxHQUFKLENBQVFhLGNBQVIsQ0FBN0I7QUFDRDs7QUFFREosbUJBQWlCO0FBQ2YsUUFBSU0sV0FBVyxJQUFJQyxrQkFBSixFQUFmO0FBQ0EsU0FBS0MsV0FBTCxDQUFpQkYsUUFBakI7QUFDRDs7QUFFREUsY0FBWUMsU0FBWixFQUF1QjtBQUNyQixRQUFJLEtBQUtwQixrQkFBTCxDQUF3QnFCLE1BQXhCLEtBQW1DLENBQXZDLEVBQTBDO0FBQ3hDLFVBQUk1Qix1QkFBdUIsSUFBSUMsdUJBQUosQ0FBa0IsSUFBbEIsQ0FBM0I7QUFDQSxXQUFLTSxrQkFBTCxDQUF3QmdCLElBQXhCLENBQTZCLElBQUlkLEdBQUosQ0FBUVQsb0JBQVIsQ0FBN0I7QUFDRDtBQUNELFNBQUtPLGtCQUFMLENBQXdCLENBQXhCLEVBQTJCc0IsSUFBM0IsQ0FBZ0M3Qix3QkFBd0I7QUFDdEQyQixnQkFBVUcsUUFBVixDQUFtQjlCLG9CQUFuQjtBQUNBQSwyQkFBcUIwQixXQUFyQixDQUFpQ0MsU0FBakM7QUFDRCxLQUhEO0FBSUQ7O0FBN0N1RDs7a0JBQXJDbkMsTTtBQWlEckJMLFdBQVc0QyxlQUFYLENBQTJCLENBQUN2QyxNQUFELENBQTNCIiwiZmlsZSI6IkRldmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNwaW5hbENvcmUgPSByZXF1aXJlKFwic3BpbmFsLWNvcmUtY29ubmVjdG9yanNcIik7XG5jb25zdCBnbG9iYWxUeXBlID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHdpbmRvdztcbmltcG9ydCBPcGVyYXRpb25DZW50ZXJPYmplY3QgZnJvbSBcIi4vT3BlcmF0aW9uQ2VudGVyT2JqZWN0XCJcbmltcG9ydCBFbmRwb2ludCBmcm9tIFwiLi9FbmRwb2ludFwiXG5pbXBvcnQgRW5kcG9pbnRHcm91cCBmcm9tIFwiLi9FbmRwb2ludEdyb3VwXCJcblxuaW1wb3J0IFJlbEVxdWlwZW1lbnREZXZpY2UgZnJvbSBcIi4vUmVsRXF1aXBlbWVudERldmljZVwiXG5pbXBvcnQgUmVsRGV2aWNlRXF1aXBlbWVudCBmcm9tIFwiLi9SZWxEZXZpY2VFcXVpcGVtZW50XCJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldmljZSBleHRlbmRzIE9wZXJhdGlvbkNlbnRlck9iamVjdCB7XG4gIGNvbnN0cnVjdG9yKF9wcm90b2NvbFR5cGUsIF9pZCwgbmFtZSA9IFwiRGV2aWNlXCIpIHtcbiAgICBpZiAodHlwZW9mIF9pZCA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgIHN1cGVyKCk7XG4gICAgZWxzZVxuICAgICAgc3VwZXIoX2lkKTtcbiAgICBpZiAoRmlsZVN5c3RlbS5fc2lnX3NlcnZlcikge1xuICAgICAgbGV0IGRlZmF1bHRFbmRwb2ludEdyb3VwID0gbmV3IEVuZHBvaW50R3JvdXAodGhpcylcbiAgICAgIHRoaXMuYWRkX2F0dHIoe1xuICAgICAgICBwcm90b2NvbFR5cGU6IG5ldyBDaG9pY2UoMCwgW1wiU05NUFwiLCBcIkJBQ25ldFwiXSksXG4gICAgICAgIGlwQWRkcmVzczogXCIxMjcuMC4wLjFcIixcbiAgICAgICAgZGV2aWNlVHlwZTogbmV3IENob2ljZSgwLCBbXCJTZW5zb3JcIiwgXCJSb3V0ZXJcIiwgXCJBY3R1YXRvclwiXSksXG4gICAgICAgIGVuZHBvaW50R3JvdXBzUHRyczogbmV3IExzdChbbmV3IFB0cihkZWZhdWx0RW5kcG9pbnRHcm91cCldKSxcbiAgICAgICAgZGVmYXVsdE1lYXN1cmVtZW50OiBuZXcgQ2hvaWNlKDAsIGRlZmF1bHRFbmRwb2ludEdyb3VwLmxpc3QuZ2V0KCkpLFxuICAgICAgICByZWxFcXVpcGVtZW50RGV2aWNlOiBuZXcgUHRyKG5ldyBSZWxFcXVpcGVtZW50RGV2aWNlKDAsIHRoaXMpKSxcbiAgICAgICAgcmVsRGV2aWNlRXF1aXBlbWVudDogbmV3IFB0cihuZXcgUmVsRGV2aWNlRXF1aXBlbWVudCgwKSlcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wcm90b2NvbFR5cGUuc2V0KF9wcm90b2NvbFR5cGUgfHwgXCJTTk1QXCIpO1xuICAgICAgZGVmYXVsdEVuZHBvaW50R3JvdXAuY3JlYXRlRW5kcG9pbnQoKVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUVuZHBvaW50R3JvdXAoKSB7XG4gICAgbGV0IGVuZHBvaW50R3JvdXAgPSBuZXcgRW5kcG9pbnRHcm91cCh0aGlzKVxuICAgIHRoaXMuYWRkRW5kcG9pbnRHcm91cChlbmRwb2ludEdyb3VwKTtcbiAgfVxuXG4gIGFkZEVuZHBvaW50R3JvdXAoX2VuZHBvaW50R3JvdXApIHtcbiAgICB0aGlzLmVuZHBvaW50R3JvdXBzUHRycy5wdXNoKG5ldyBQdHIoX2VuZHBvaW50R3JvdXApKVxuICB9XG5cbiAgY3JlYXRlRW5kcG9pbnQoKSB7XG4gICAgbGV0IGVuZHBvaW50ID0gbmV3IEVuZHBvaW50KClcbiAgICB0aGlzLmFkZEVuZHBvaW50KGVuZHBvaW50KVxuICB9XG5cbiAgYWRkRW5kcG9pbnQoX2VuZHBvaW50KSB7XG4gICAgaWYgKHRoaXMuZW5kcG9pbnRHcm91cHNQdHJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbGV0IGRlZmF1bHRFbmRwb2ludEdyb3VwID0gbmV3IEVuZHBvaW50R3JvdXAodGhpcylcbiAgICAgIHRoaXMuZW5kcG9pbnRHcm91cHNQdHJzLnB1c2gobmV3IFB0cihkZWZhdWx0RW5kcG9pbnRHcm91cCkpXG4gICAgfVxuICAgIHRoaXMuZW5kcG9pbnRHcm91cHNQdHJzWzBdLmxvYWQoZGVmYXVsdEVuZHBvaW50R3JvdXAgPT4ge1xuICAgICAgX2VuZHBvaW50LnNldEdyb3VwKGRlZmF1bHRFbmRwb2ludEdyb3VwKTtcbiAgICAgIGRlZmF1bHRFbmRwb2ludEdyb3VwLmFkZEVuZHBvaW50KF9lbmRwb2ludClcbiAgICB9KVxuICB9XG5cbn1cblxuc3BpbmFsQ29yZS5yZWdpc3Rlcl9tb2RlbHMoW0RldmljZV0pIl19